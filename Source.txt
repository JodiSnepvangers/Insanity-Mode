settings
{
	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Spectators: 12
	}

	modes
	{
		Deathmatch

		General
		{
			Allow Hero Switching: Off
			Game Mode Start: Immediately
			Limit Roles: 2 Of Each Role Per Team
			Respawn As Random Hero: On
			Score To Win: 50
		}
	}

	heroes
	{
		General
		{
			Ultimate Generation - Combat: 0%
			Ultimate Generation - Passive: 0%

			Ashe
			{
				Coach Gun Cooldown Time: 25%
				Damage Dealt: 80%
				Dynamite Cooldown Time: 0%
				Dynamite Fuse Time Scalar: 1%
			}

			Baptiste
			{
				Infinite Ultimate Duration: On
			}

			Bastion
			{
				Damage Dealt: 60%
				Health: 60%
			}

			Brigitte
			{
				Healing Dealt: 50%
				Whip Shot Cooldown Time: 50%
			}

			Doomfist
			{
				Rising Uppercut Cooldown Time: 40%
				Rocket Punch Cooldown Time: 60%
				Seismic Slam Cooldown Time: 40%
			}

			Echo
			{
				Damage Dealt: 250%
				Flight Cooldown Time: 0%
				Focusing Beam Cooldown Time: 0%
				Health: 50%
				Sticky Bombs: Off
			}

			Genji
			{
				Infinite Ultimate Duration: On
			}

			Mei
			{
				Damage Dealt: 60%
				Weapon Freeze Rate Scalar: 0%
			}

			Orisa
			{
				Fortify Cooldown Time: 0%
			}

			Pharah
			{
				Hover Jets Unlimited Fuel: On
				No Ammunition Requirement: On
			}

			Reaper
			{
				Damage Dealt: 130%
			}

			Reinhardt
			{
				Health: 40%
			}

			Soldier: 76
			{
				Damage Dealt: 75%
				Infinite Ultimate Duration: On
				Spawn With Ultimate Ready: On
			}

			Symmetra
			{
				Sentry Turret Cooldown Time: 70%
			}

			Tracer
			{
				No Ammunition Requirement: On
			}

			Winston
			{
				Damage Dealt: 80%
				No Ammunition Requirement: On
			}

			Wrecking Ball
			{
				Movement Speed: 200%
				Roll: Off
			}

			Zenyatta
			{
				Jump Vertical Speed: 220%
				Movement Speed: 250%
				Orb of Harmony: Off
				Primary Fire: Off
				Secondary Fire: Off
			}

			disabled heroes
			{
				Hanzo
				Junkrat
				LÃºcio
				Mercy
				Sigma
				Widowmaker
			}
		}
	}

	workshop
	{
		Array Reset Chance: 20
		Backprogress Speed: 0.100
		Barrier Power Usage: 15
		Battery Primary Drain Delay: 0.200
		Bonus Damage Limit: 200
		Bonus Damage Lower Rate: 0.200
		Bottle Max: 394
		Forced Hero: Echo
		Laser Damage: 20
		Laser Radius: 3.000
		Laser Strike Delay: 1.200
		Logger: On
		Maximum Delay: 60
		Minimum Delay: 30
		Primary Freeze Duration: 0.200
		Reflective Bubble Duration: 2
		Secondary Freeze Duration: 0.600
		Shield Max: 1600
		sleep delay max: 3.000
		sleep delay min: 1.000
		Turret Damage Dealt: 200
		Ult Arena Duration: 30
		Ult Charge Prize for kill: 10
		Ult Gain per kill: 35
		Ultimate Damage Division Charge gain: 10.000
		Ultimate Damage Minimum Charge gain: 0.100
		Ultimate Freeze Delay: 0.150
		Ultimate Freeze Duration: 0.200
	}
}

variables
{
	global:
		0: GlobalHeroArray
		1: GlobalCustomBotHeroArray
		2: LobbySettingOrisaBonusDamage
		3: LobbySettingOrisaBonusLimit
		4: LobbySettingGeneralChargeOnKill
		5: LobbySettingMinimumUltGain
		6: LobbySettingDivideUltGain
		7: LobbySettingDoomfistAreaSize
		8: HammerLocations
		9: HammerCurrentLoc
		10: HammerSpawnDelay
		11: HammerEffectTrash
		12: HammerRadius
		13: HammerReinList
		14: HammerCaptureStatus
		15: HammerCaptureGoal
		16: HammerHolder
		17: HammerBuffDuration
		18: LobbyAnaMaxDartUsed
		19: LobbyWinstonBarrierDrain
		20: LobbySymetraLaserRadius
		21: LobbySymetraLaserDelay
		22: LobbySymetraLaserDamagePerTick
		23: LobbySymetraLaserDelayPerTick
		24: LobbySymetraLaserTicks
		25: LobbySymetraCastRange
		26: LobbyWreckinBallRange
		27: MeiBlizzardDuration
		28: LobbyRoadhogBottleMax
		29: lobbyRoadhogBottleHeal
		30: LobbyRoadhogMaxShield
		31: TEMPObjectClearCounter
		32: TEMPOrisaDamageDown
		33: TEMPSoldierClean
		34: TEMPSombraUltSpam
		35: TEMPMoiraClean
		36: TEMPDoomClean
		37: TEMPHammerClean
		38: TEMPHammerUnCapture
		39: TEMPReaperPrepare
		40: TEMPSymetraBeam1
		41: TEMPSymetraBeam2
		42: TEMPSymetraBeam3
		43: TEMPSymetraUltClean
		44: TEMPRoadhogCleanAll
		45: TEMPRoadhogCleanPrivate
		46: TEMPTutorialDestroy

	player:
		0: LocalHeroArray
		1: CurrentHero
		2: RespawnState
		3: MoveSpeedArray
		4: StatIndex
		5: DamageDealtArray
		6: DamageRecievedArray
		7: MaxHealthArray
		8: JumpVerticalArray
		9: StatUpdateCall
		10: TrashArray
		11: BossBarHealth
		12: BossBarEnabled
		13: KillSpree
		14: DamageTotal
		15: DamageTicks
		16: TakenTotal
		17: TakenTicks
		18: CalculatingDeath
		19: TutorialGuiTrash
		20: CanWriteToPlayerBoolean
		21: CustomBotHero
		22: CustomBotOwner
		23: CustomBotAutoAimEnabled
		25: CustomBotTurnRate
		26: CustomBotMaxAmmo
		27: CustomBotDetectionRange
		28: CustomBotDummyBot
		29: CustomBotFriendlyFire
		30: CustomBotWalkWaypoint
		31: TorbHoldingTurret
		34: CustomBotInaccuracy
		35: CustomBotDamageTaken
		36: CustomBotDamageDealt
		37: CustomBotMoveSpeed
		38: CustomBotMaximumHealth
		45: UltimateChargeValue
		46: SombraAvailableHeroes
		47: SombraRerollAvailable
		48: SombraUsingUltimate
		49: SombraRevealing
		50: MoiraBeamID
		51: DoomfistArenaLocation
		52: DoomfistTargetList
		53: DoomfistAreaBounce
		54: DoomfistArenaTimer
		55: DoomfistArenaTrash
		56: ZaryaColorSway
		57: ZaryaReflectDuration
		58: ZaryaStartingHealth
		59: ReaperSoulsCollected
		60: ReaperSoulList
		61: WinstonBatteryPower
		62: TracerBombStack
		63: TracerUltChargeSave
		64: GenjiUsedUlt
		65: GenjiCooldownSave
		66: SymetraLocationArray
		67: SymetraAimingDirection
		68: SymetraFiringLaser
		69: SymetraLaserTicks
		70: SymetraUltimateLocation
		71: GenjiHealthID
		72: SymetraOrbSize
		73: SymetraTargetList
		74: SymetraUltimateTrashArray
		75: SymetraIndexer
		76: WreckingBallCountdown
		77: WreckingBallExplosion
		78: WreckingBallVictim
		79: WreckingBallUltBonus
		80: WreckingBallArmed
		81: WreckingBallKiller
		82: RoadhogUltimateTarget
		83: RoadhogTrashArray
		84: RoadhogBlacklist
		85: BastionMercyHealingModus
		86: BastionMercyFlight
		87: BastionMercyCooldown
		89: BridgitteHealthStack
		90: ZenyattaRandomRoll
		92: TorbMountTurret
}

subroutines
{
	0: selectNewHero
	1: MoveSpeedUpdate
	2: DamageDealtUpdate
	3: DamageRecievedUpdate
	4: MaxHealthUpdate
	5: JumpVerticalUpdate
	6: PlayerReset
	7: CleanDummyBots
	8: CleanObjects
	9: CreateBossBar
	10: ClearBattleStats
	11: CreateCustomBot
	12: DoomfistBreakArena
	13: ReinOnGameInitialise
	14: HammerPrepareNewSpawn
	15: HammerDestroy
	16: InfoCreate
	17: InfoDestroy
	18: BastionStopFlight
	19: CounterCreation
}

disabled rule("CounterGuiCreator")
{
	event
	{
		Subroutine;
		CounterCreation;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Custom String("Object Clear: {0}", Global.TEMPObjectClearCounter), Null, Null, Left, 10,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Orisa Dmg Down: {0}", Global.TEMPOrisaDamageDown), Null, Null, Left, 10,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Soldier Clean: {0}", Global.TEMPSoldierClean), Null, Null, Left, 10, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Sombra Ult Spam: {0}", Global.TEMPSombraUltSpam), Null, Null, Left, 10,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Moira Clean: {0}", Global.TEMPMoiraClean), Null, Null, Left, 10, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Doomfist Clean: {0}", Global.TEMPDoomClean), Null, Null, Left, 10, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Hammer Clean: {0}", Global.TEMPHammerClean), Null, Null, Left, 10, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Hammer Lose Progress: {0}", Global.TEMPHammerUnCapture), Null, Null, Left,
			10, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Reaper Prepare: {0}", Global.TEMPReaperPrepare), Null, Null, Left, 10,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Sym Beam1: {0}", Global.TEMPSymetraBeam1), Null, Null, Left, 10, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Sym Beam2: {0}", Global.TEMPSymetraBeam2), Null, Null, Left, 10, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Sym Beam3: {0}", Global.TEMPSymetraBeam3), Null, Null, Left, 10, Color(
			White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Sym Ult Clean: {0}", Global.TEMPSymetraUltClean), Null, Null, Left, 10,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Roadhog Clean Public: {0}", Global.TEMPRoadhogCleanAll), Null, Null, Left,
			10, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Roadhog Clean Private: {0}", Global.TEMPRoadhogCleanPrivate), Null, Null,
			Left, 10, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Tutorial Destroy: {0}", Global.TEMPTutorialDestroy), Null, Null, Left, 10,
			Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("DestroyInfoOnKill")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.TutorialGuiTrash != Empty Array;
		Event Player.KillSpree > 0;
	}

	actions
	{
		Call Subroutine(InfoDestroy);
	}
}

rule("HeroTurorialDestroyer")
{
	event
	{
		Subroutine;
		InfoDestroy;
	}

	actions
	{
		Abort If(Count Of(Event Player.TutorialGuiTrash) == 0);
		While(Count Of(Event Player.TutorialGuiTrash) > 0);
			Destroy HUD Text(Event Player.TutorialGuiTrash[0]);
			Modify Player Variable(Event Player, TutorialGuiTrash, Remove From Array By Index, 0);
			Global.TEMPTutorialDestroy += 1;
		End;
	}
}

rule("HeroTutorialGenerator")
{
	event
	{
		Subroutine;
		InfoCreate;
	}

	actions
	{
		Abort If(Is Dummy Bot(Event Player));
		If(Hero Of(Event Player) == Hero(Ana));
			"Ana"
			Create HUD Text(Event Player, Null, Custom String("Sleep dart has been replaced. now if sleep dart is available,"), Null, Right, 1,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("the next time you deal damage also inflicts sleep."), Null, Right, 2, Color(
				White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Press [Ability 1] to use some ammo to heal yourself."), Null, Right, 3, Color(
				White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(D.Va));
			"Dva"
			Create HUD Text(Event Player, Null, Custom String(
				"Ultimate is unavailable. instead, when you get ejected, ultimate is automatically used"), Null, Right, 1, Color(White), Color(
				White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Doomfist));
			"Doomfist"
			Create HUD Text(Event Player, Null, Custom String("Get Ready... Fight!"), Null, Right, 1, Color(White), Color(White), Color(White),
				None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Doomfist's ult no longer deals damage!"), Null, Right, 2, Color(White), Color(
				White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Instead, it creates a arena that traps unfortunates in there with Doomfist."),
				Null, Right, 3, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("The winner of a arena gets their ult instantly"), Null, Right, 4, Color(White),
				Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(McCree));
			"Mccree"
			Create HUD Text(Event Player, Null, Custom String("This town is too small for all of us..."), Null, Right, 1, Color(White), Color(
				White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Being the relentless cowboy you are, you have a device that heals any damage you take! as long as it isnt hacked..."), Null,
				Right, 2, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"You can only die by headshots, or taking lethal damage. Your revolver instakills upon dealing a headshot."), Null, Right, 3,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Mei));
			"Mei"
			Create HUD Text(Event Player, Null, Custom String(
				"Mei has a rapid freezing ability that also works on her secondary. you are immune to being frozen."), Null, Right, 1, Color(
				White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("whenever and wherever a person gets frozen, you gain some ult charge."), Null,
				Right, 2, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Using your ultimate, gives everyone the ability to freeze each other by doing damage!"), Null, Right, 3, Color(White), Color(
				White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Moira));
			"Moira"
			Create HUD Text(Event Player, Null, Custom String("Seek to spread your curse..."), Null, Right, 1, Color(White), Color(White),
				Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Thanks to one of Moira's expiriments, she was riddled with corruption."), Null,
				Right, 2, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Her drain can now suck the ultimate charge of other heroes, and hacks those with no charge to drain."), Null, Right, 3, Color(
				White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"If Moira is ever hacked, she becomes 'unstable', inflicting the next attacker with hack. Moira's cannot hack other Moira's!"),
				Null, Right, 4, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Lastly, Moira's ultimate inflicts hack upon all that it damages."), Null, Right,
				5, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Orisa));
			"Orisa"
			Create HUD Text(Event Player, Null, Custom String("A expiriment gone wrong."), Null, Right, 1, Color(White), Color(White), Color(
				White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Orisa was just a piece of test code to test the engine's capability..."), Null,
				Right, 2, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("But for some reason she dominates most other characters."), Null, Right, 3,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("So here we are"), Null, Right, 4, Color(White), Color(White), Color(White),
				None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Filtered Array(Players On Hero(Hero(Orisa), All Teams), Is Alive(Current Array Element)), Null, Custom String(" "),
				Null, Right, 5, Color(White), Color(White), Color(White), Visible To, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Dealing damage gives you a stacking bonus damage which goes away after not attacking for a while."), Null, Right, 6, Color(
				White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Fortify no longer works. instead it has no cooldown and gets activated upon taking damage."), Null, Right, 7, Color(White),
				Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Reaper));
			"Reaper"
			Create HUD Text(Event Player, Null, Custom String("\"May the flame guide thee\""), Null, Right, 1, Color(White), Color(White),
				Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("collect the souls of the fallen heroes, using them to boost your abilities"),
				Null, Right, 2, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Only the souls of unqiue heroes can be captured"), Null, Right, 4, Color(White),
				Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Guard Teleport: become immune while teleporting"), Null, Right, 5, Color(White),
				Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("See Though Walls: see other players and their hero's though walls"), Null,
				Right, 6, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Ghost Wraith: Wraith now lets you go though walls"), Null, Right, 7, Color(
				White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Backstab Bonus: Deal bonus damage for attacking someone from behind"), Null,
				Right, 8, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Frostbite Blossom: your ultimate now freezes those it attacks."), Null, Right,
				9, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Reinhardt));
			"Reinharth"
			Create HUD Text(Event Player, Null, Custom String("Brother! There are disbelievers among you!"), Null, Right, 1, Color(White),
				Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("You have been equipped with a self restoring shield upon your health!"), Null,
				Right, 2, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Hammer's frequently spawn upon the map. Capture those to unleash your full fury!"), Null, Right, 3, Color(White), Color(
				White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(" "), Null, Right, 4, Color(White), Color(White), Color(White), None,
				Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Now go purge those heritics, Brother!"), Null, Right, 5, Color(White), Color(
				White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Soldier: 76));
			"Soldier76"
			Create HUD Text(Event Player, Null, Custom String("Starts out with ultimate and does not run out of it!"), Null, Right, 1, Color(
				White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Sombra));
			"Sombra"
			Create HUD Text(Event Player, Null, Custom String(
				"Sombra's invisibility has a limited duration! Hitting someone who is hacked gives you ult charge"), Null, Right, 1, Color(
				White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Sombra's ultimate has been replaced: using it lets you choose another hero to change into."), Null, Right, 2, Color(White),
				Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"To use it, use your ult and look at the top of the screen. two hero's will be shown."), Null, Right, 3, Color(White), Color(
				White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"You may choose between either hero by holding [ultimate] and pressing [primary] or [secondary] respectively."), Null, Right,
				4, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"you may reroll using [interact]. Beware: these heroes are a weaker variant of their originals!"), Null, Right, 5, Color(
				White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"If you die with your selected hero, you are revealed and use your normal ultimate, unless you are hacked!"), Null, Right, 6,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(TorbjÃ¶rn));
			"Torbjorn"
			Create HUD Text(Event Player, Null, Custom String(
				"Maybe i sometimes should ask myself weither 'should i do that?' instead of 'could i do that?'"), Null, Right, 1, Color(White),
				Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Turret has been replaced with bastion. Bastion can be healed with hammer and picked up/thrown with [interact] while crouching"),
				Null, Right, 2, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"pressing [interact] without crouching, you mount your turret and are able to shoot it. press it again to dismount. "), Null,
				Right, 3, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Holding [interact] while holding bastion will both throw and mount him, letting you dive in or reach new places!"), Null,
				Right, 4, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Bastion will keep on firing when you dismount him. Using your ultimate, you can trigger your bastion's ult instead."), Null,
				Right, 5, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Beware: Bastion can still kill you if you cross its line of fire!"), Null,
				Right, 6, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Tracer));
			"Tracer"
			Create HUD Text(Event Player, Null, Custom String("Tracer gains her ultimate rapidly, and can stack them up."), Null, Right, 1,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Winston));
			"Winston"
			Create HUD Text(Event Player, Null, Custom String("\"I have finite power!\" -Winston"), Null, Right, 1, Color(White), Color(White),
				Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Winston now has a battery meter that depletes when he uses his primary or his shield."), Null, Right, 2, Color(White), Color(
				White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"both his primary and shield are much stronger, and if you have a green battery, Primary stuns its targets."), Null, Right, 3,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("However, running our of battery disables primary fire and shield."), Null,
				Right, 4, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"To recharge, find a hiding spot and crouch down to fall asleep. While asleep, battery and health both regenerate."), Null,
				Right, 5, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("You snap out of any sleep as long as your battery and health are at max"), Null,
				Right, 6, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Zarya));
			"Zarya"
			Create HUD Text(Event Player, Null, Custom String(
				"Using your 'ally shield' you now deploy a reflective shield instead, which reflects all damage taken back to the attacker"),
				Null, Right, 1, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Beware: this cannot and does not reflect status effects!"), Null, Right, 2,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Zenyatta));
			"Zenyatta"
			Create HUD Text(Event Player, Null, Custom String(
				"You are a battle monk! now go melee the enemy and hope for a critical success!"), Null, Right, 1, Color(White), Color(White),
				Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Genji));
			"Genji"
			Create HUD Text(Event Player, Null, Custom String(
				"After killing his brother, Genji decided to learn his abilities to let Hanzo live on!"), Null, Right, 1, Color(White), Color(
				White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Using deflect, Genji now shoots storm arrows as long as hes deflecting"), Null,
				Right, 2, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Genji is capable of firing a sonar arrow by pressing [interact]"), Null, Right,
				3, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Genji's blade is now permanently active once his ult is used. using his ult again will cause Hanzo's dragon to appear."),
				Null, Right, 4, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"When Genji's barrier depletes, his non repairable armor is exposed, and any damage is permanent!"), Null, Right, 5, Color(
				White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Warning: Genji is highly exprirmental. dont try too much jankey stuff or you might find yourself with a arrow in your face"),
				Null, Right, 6, Color(Red), Color(Red), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Symmetra));
			"Symetra"
			Create HUD Text(Event Player, Null, Custom String(
				"20 years ago, someone told Symetra that her turrets were small, which motivated her to expiriment and research into project BSS!"),
				Null, Right, 1, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Using your turrets marks a area for a orbital strike. this goes though barriers!"), Null, Right, 2, Color(White), Color(
				White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Using your ultimate, you place a orb that after a delay teleports everyone who can see it to its center."), Null, Right, 3,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Wrecking Ball));
			"Wrecking ball"
			Create HUD Text(Event Player, Null, Custom String(
				"whats worse than inflicting a rodent with psychosis? equipping said rodent with a selfdestructing robot!"), Null, Right, 1,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("Why are you still reading this? you have ten seconds before you explode!"),
				Null, Right, 2, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String("dont worry... you carry your ultimate charge to your next life!"), Null, Right,
				3, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Roadhog));
			"Roadhog"
			Create HUD Text(Event Player, Null, Custom String("Who knew there was someone with such a appetite and isnt picky!"), Null, Right,
				1, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Roadhog cannot recover damage with healthpacks. instead, he has to use his abilities to increase his max health"), Null,
				Right, 2, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Using Breather, you can reset your starting health. The Treshold is equal to half your HP"), Null, Right, 3, Color(White),
				Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Hook will instakill if the targets [current] health is below your max health. Being successful resets hook's cooldown."),
				Null, Right, 4, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"your ultimate will hook and pull in opponents whos [maximum] health is below yours, instakilling them"), Null, Right, 5,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Bastion));
			"bastion"
			Create HUD Text(Event Player, Null, Custom String(
				"Who would have thought the technology exists to have a automatic pocket healer? Truly a time to be alive!"), Null, Right, 1,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"Bastion spawns with a pocket mercy who automatically damage boosts or heals them depending on the situation"), Null, Right, 2,
				Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"pressing interact however, Bastion combines with his pocket to enable 'Attack Jet Mode'. use crouch or shift to slow or speed up"),
				Null, Right, 3, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
			Create HUD Text(Event Player, Null, Custom String(
				"using your ultimate, getting hacked, mercy getting killed, or pressing [interact] will disengage attack jet mode"), Null,
				Right, 4, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Ashe));
			"Ashe"
			Create HUD Text(Event Player, Null, Custom String("Reduces cooldowns and no dynamite fuse!"), Null, Right, 1, Color(White), Color(
				White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Baptiste));
			"Baptiste"
			Create HUD Text(Event Player, Null, Custom String(
				"Starts invisible for 30 seconds after spawn, and starts with ultimate. using ult, dealing damage, or getting damaged reveals you"),
				Null, Right, 1, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Brigitte));
			"Bridgitte"
			Create HUD Text(Event Player, Null, Custom String(
				"Dealing damage gives you a stacking max health boost! however, whoever kills you will gain your stacks as unrecoverable health."),
				Null, Right, 1, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
		Else If(Hero Of(Event Player) == Hero(Pharah));
			"Phara"
			Create HUD Text(Event Player, Null, Custom String("Endless fuel for flying. Both primary fire and your ultimate are doubled!"),
				Null, Right, 1, Color(White), Color(White), Color(White), None, Default Visibility);
			Modify Player Variable(Event Player, TutorialGuiTrash, Append To Array, Last Text ID);
	}
}

rule("PlayerWriteChecker")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.CanWriteToPlayerBoolean != True;
	}

	actions
	{
		Wait(0.050, Abort When False);
		Event Player.CanWriteToPlayerBoolean = True;
		Loop If Condition Is True;
	}
}

rule("MatchTimerExpand")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
	}

	actions
	{
		Set Match Time(Workshop Setting Integer(Custom String("General"), Custom String("Match Time"), 1800, 1, 3599, 0));
	}
}

disabled rule("HammerDebug")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Reload)) == True;
	}

	actions
	{
		Global.HammerSpawnDelay = 0;
		disabled Wait(10.250, Ignore Condition);
		disabled Call Subroutine(HammerDestroy);
	}
}

rule("DebugHack")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Workshop Setting Toggle(Custom String("Debug"), Custom String("Debug Hack/Ultimate"), False, 0) == True;
		Is Button Held(Event Player, Button(Melee)) == True;
	}

	actions
	{
		Set Status(Event Player, Null, Hacked, 3);
		Set Ultimate Charge(Event Player, 100);
		disabled Call Subroutine(HammerDestroy);
	}
}

rule("DebugBot")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Workshop Setting Toggle(Custom String("Debug"), Custom String("Debug bot"), False, 0) == True;
		Event Player == Host Player;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		disabled Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Disable Movement Collision With Players(Event Player);
		Create Dummy Bot(Hero(Reaper), All Teams, -1, Position Of(Event Player), Facing Direction Of(Event Player));
		disabled Set Status(Last Created Entity, Null, Unkillable, 9999);
		Wait(0.250, Ignore Condition);
		disabled Create Dummy Bot(Hero(LÃºcio), All Teams, -1, Position Of(Event Player), Facing Direction Of(Event Player));
		disabled Start Holding Button(Last Created Entity, Button(Primary Fire));
		disabled Set Status(Last Created Entity, Null, Invincible, 9999);
		disabled Last Created Entity.KillSpree = 1;
		disabled Set Ultimate Charge(Last Created Entity, 5);
		disabled Kill(Last Created Entity, Null);
		disabled Loop If Condition Is False;
		disabled Event Player.CustomBotHero = Hero(Bastion);
		disabled While(True);
		disabled Wait(0.250, Ignore Condition);
		disabled Set Ability Cooldown(Last Created Entity, Button(Secondary Fire), 0);
		disabled Call Subroutine(CreateCustomBot);
		disabled Kill(Last Created Entity, Null);
		disabled Press Button(Last Created Entity, Button(Secondary Fire));
		disabled End;
		disabled Attach Players(Event Player, Last Created Entity, Vector Towards(Position Of(Last Created Entity), Position Of(Event Player))
			* Vector(2, 2, 2));
		Last Created Entity.ReaperSoulsCollected = 3;
		Last Created Entity.ReaperSoulList = Array(Random Value In Array(All Heroes), Random Value In Array(All Heroes),
			Random Value In Array(All Heroes));
	}
}

rule("Display server performance characteristics")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Host Player, String("{0}: {1}", String("Server Load"), String("{0}%", Update Every Frame(Server Load))), Null,
			Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(Host Player, String("{0}: {1}", String("Server Load Average"), String("{0}%", Update Every Frame(
			Server Load Average))), Null, Null, Left, 1, Color(White), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(Host Player, String("{0}: {1}", String("Server Load Peak"), String("{0}%", Update Every Frame(Server Load Peak))),
			Null, Null, Left, 2, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("InitialSetup")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.GlobalHeroArray == 0;
		Allowed Heroes(Host Player) != Empty Array;
	}

	actions
	{
		Global.GlobalHeroArray = Array(Hero(Ana), Hero(D.Va), Hero(Doomfist), Hero(Genji), Hero(McCree), Hero(Mei), Hero(Moira), Hero(
			Orisa), Hero(Reaper), Hero(Reinhardt), Hero(Sombra), Hero(Tracer), Hero(Winston), Hero(Zarya), Hero(Symmetra), Hero(
			Wrecking Ball), Hero(Roadhog), Hero(Bastion), Hero(Zenyatta), Hero(Soldier: 76), Hero(Ashe), Hero(Brigitte), Hero(TorbjÃ¶rn),
			Hero(Pharah), Hero(Echo));
		disabled Global.GlobalHeroArray = Allowed Heroes(Host Player);
		Disable Built-In Game Mode Scoring;
		"this array is used to ban out heroes who use custom bots (not allowed with more than 6 players"
		Global.GlobalCustomBotHeroArray = Array(Hero(TorbjÃ¶rn), Hero(Soldier: 76), Hero(Zenyatta));
		Global.LobbySettingOrisaBonusDamage = Workshop Setting Real(Custom String("Orisa"), Custom String("Bonus Damage Amount"), 0, 2, 10,
			0);
		Global.LobbySettingOrisaBonusLimit = Workshop Setting Integer(Custom String("Orisa"), Custom String("Bonus Damage Limit"), 300, 10,
			1000, 0);
		disabled Disable Inspector Recording;
		Global.LobbySettingGeneralChargeOnKill = Workshop Setting Integer(Custom String("General"), Custom String(
			"Ult Charge Prize for kill"), 5, 0, 100, 0);
		Global.LobbySettingMinimumUltGain = Workshop Setting Real(Custom String("General"), Custom String(
			"Ultimate Damage Minimum Charge gain"), 0.100, 0, 100, 0);
		Global.LobbySettingDivideUltGain = Workshop Setting Real(Custom String("General"), Custom String(
			"Ultimate Damage Division Charge gain"), 15, 0, 100, 0);
		Global.LobbySettingDoomfistAreaSize = Workshop Setting Integer(Custom String("Doomfist"), Custom String("Ult Arena size"), 15, 5,
			50, 0);
		Call Subroutine(ReinOnGameInitialise);
		Global.LobbyAnaMaxDartUsed = Workshop Setting Integer(Custom String("Ana"), Custom String("Max Darts Used"), 3, 1, 12, 0);
		Global.LobbyWinstonBarrierDrain = Workshop Setting Integer(Custom String("Winston"), Custom String("Barrier Power Usage"), 25, 0,
			100, 0);
		Global.LobbySymetraLaserRadius = Workshop Setting Real(Custom String("Symetra"), Custom String("Laser Radius"), 2, 1, 5, 0);
		Global.LobbySymetraLaserDelay = Workshop Setting Real(Custom String("Symetra"), Custom String("Laser Strike Delay"), 1.600, 0, 5,
			0);
		Global.LobbySymetraLaserDamagePerTick = Workshop Setting Integer(Custom String("Symetra"), Custom String("Laser Damage"), 15, 0,
			200, 0);
		Global.LobbySymetraLaserTicks = Workshop Setting Integer(Custom String("Symetra"), Custom String("Laser Damage Ticks"), 20, 1, 50,
			0);
		Global.LobbySymetraLaserDelayPerTick = Workshop Setting Real(Custom String("Symetra"), Custom String("Laser Damage Tick Delay"),
			0.100, 0.100, 1, 0);
		Global.LobbySymetraCastRange = Workshop Setting Integer(Custom String("Symetra"), Custom String("Cast Range"), 50, 10, 100, 0);
		Global.LobbyWreckinBallRange = Workshop Setting Integer(Custom String("WreckingBall"), Custom String("Explosion Range"), 20, 5, 40,
			0);
		Global.LobbyRoadhogBottleMax = Workshop Setting Integer(Custom String("Roadhog"), Custom String("Bottle Max"), 294, 0, 1200, 0);
		Global.lobbyRoadhogBottleHeal = Workshop Setting Integer(Custom String("Roadhog"), Custom String("Bottle Heal"), 100, 0, 1200, 0);
		Global.LobbyRoadhogMaxShield = Workshop Setting Integer(Custom String("Roadhog"), Custom String("Shield Max"), 1695, 0, 3000, 0);
		Wait(0.250, Ignore Condition);
		Skip If(Workshop Setting Toggle(Custom String("Debug"), Custom String("Logger"), False, 0), 1);
		Disable Inspector Recording;
		Call Subroutine(CounterCreation);
	}
}

disabled rule("Subroutines")
{
	event
	{
		Ongoing - Global;
	}
}

rule("HeroSelector")
{
	event
	{
		Subroutine;
		selectNewHero;
	}

	actions
	{
		"check and fill up local array if its empty"
		If(Event Player.LocalHeroArray == 0 || Event Player.LocalHeroArray == Empty Array);
			Event Player.LocalHeroArray = Global.GlobalHeroArray;
		End;
		If(Count Of(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) == False)) > 6);
			Event Player.LocalHeroArray = Filtered Array(Event Player.LocalHeroArray, Array Contains(Global.GlobalCustomBotHeroArray,
				Current Array Element) == False);
		End;
		"check if still empty. if so, then global array has illegal heroes only"
		If(Event Player.LocalHeroArray == 0 || Event Player.LocalHeroArray == Empty Array);
			Event Player.LocalHeroArray = All Heroes;
		End;
		"pick hero at random from local array"
		Event Player.CurrentHero = Random Value In Array(Randomized Array(Event Player.LocalHeroArray));
		"loop if there are more than 6 people AND selected hero is on the banned hero list"
		Loop If(Array Contains(Global.GlobalCustomBotHeroArray, Event Player.CurrentHero) && Count Of(Filtered Array(All Players(
			All Teams), Is Dummy Bot(Current Array Element) == False)) > 6);
		"remove selected hero from array"
		Modify Player Variable(Event Player, LocalHeroArray, Remove From Array By Value, Event Player.CurrentHero);
		Event Player.RespawnState = 0;
		If(Workshop Setting Toggle(Custom String("Debug"), Custom String("Force Hero"), False, -1));
			Event Player.CurrentHero = Workshop Setting Hero(Custom String("Debug"), Custom String("Forced Hero"), Ana, -1);
		End;
		Abort If(Workshop Setting Integer(Custom String("Respawn"), Custom String("Array Reset Chance"), 10, 0, 100, 0) <= Random Integer(
			0, 100));
		Event Player.LocalHeroArray = Empty Array;
	}
}

rule("PlayerResetStats")
{
	event
	{
		Subroutine;
		PlayerReset;
	}

	actions
	{
		Event Player.MoveSpeedArray = Empty Array;
		Event Player.DamageDealtArray = Empty Array;
		Event Player.DamageRecievedArray = Empty Array;
		Event Player.MaxHealthArray = Empty Array;
		Event Player.JumpVerticalArray = Empty Array;
		Call Subroutine(MoveSpeedUpdate);
		Call Subroutine(DamageDealtUpdate);
		Call Subroutine(DamageRecievedUpdate);
		Call Subroutine(MaxHealthUpdate);
		Call Subroutine(JumpVerticalUpdate);
		Remove All Health Pools From Player(Event Player);
		Event Player.BossBarEnabled = False;
		Allow Button(Event Player, Button(Primary Fire));
		Allow Button(Event Player, Button(Secondary Fire));
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Ability 2));
		Allow Button(Event Player, Button(Ultimate));
		Allow Button(Event Player, Button(Interact));
		Allow Button(Event Player, Button(Jump));
		Allow Button(Event Player, Button(Crouch));
		Allow Button(Event Player, Button(Melee));
		Allow Button(Event Player, Button(Reload));
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Crouch Enabled(Event Player, True);
		Set Jump Enabled(Event Player, True);
		Set Melee Enabled(Event Player, True);
		Set Primary Fire Enabled(Event Player, True);
		Set Reload Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ultimate Ability Enabled(Event Player, True);
		Set Invisible(Event Player, None);
		Clear Status(Event Player, Hacked);
		Clear Status(Event Player, Burning);
		Clear Status(Event Player, Knocked Down);
		Clear Status(Event Player, Asleep);
		Clear Status(Event Player, Frozen);
		Clear Status(Event Player, Unkillable);
		Clear Status(Event Player, Invincible);
		Clear Status(Event Player, Phased Out);
		Clear Status(Event Player, Rooted);
		Clear Status(Event Player, Stunned);
		Set Healing Dealt(Event Player, 100);
		Set Healing Received(Event Player, 100);
		Stop Scaling Player(Event Player);
		Stop Modifying Hero Voice Lines(Event Player);
	}
}

rule("PlayerResetBattleStatNumbers")
{
	event
	{
		Subroutine;
		ClearBattleStats;
	}

	actions
	{
		Event Player.KillSpree = 0;
		Event Player.DamageTotal = 0;
		Event Player.DamageTicks = 0;
		Event Player.TakenTotal = 0;
		Event Player.TakenTicks = 0;
	}
}

disabled rule("PlayerEventHandlers")
{
	event
	{
		Ongoing - Global;
	}
}

rule("GainUltimateCharge")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		(!Is Dummy Bot(Event Player) || Event Player.CustomBotOwner != Null) == True;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		disabled Event Ability != Button(Ultimate);
		(Victim == Event Player.CustomBotOwner || Victim == Event Player.CustomBotDummyBot) != True;
		Hero Of(Attacker) != Hero(Moira);
		Hero Of(Attacker) != Hero(Wrecking Ball);
		Hero Of(Attacker) != Hero(Roadhog);
	}

	actions
	{
		disabled Wait(0.020, Ignore Condition);
		If(Is Dummy Bot(Event Player));
			disabled Skip If(Event Was Critical Hit == False, 1);
			disabled Event Player.CustomBotOwner.UltimateChargeValue += Max(Global.LobbySettingMinimumUltGain,
				Event Damage / Global.LobbySettingDivideUltGain);
			Event Player.CustomBotOwner.UltimateChargeValue += Max(Global.LobbySettingMinimumUltGain,
				Event Damage / Global.LobbySettingDivideUltGain);
			disabled Event Player.CustomBotOwner.UltimateChargeValue = Ultimate Charge Percent(Event Player.CustomBotOwner)
				+ Event Player.CustomBotOwner.UltimateChargeValue;
			disabled Set Ultimate Charge(Event Player.CustomBotOwner, Event Player.CustomBotOwner.UltimateChargeValue);
			disabled Skip If(Event Player.CustomBotOwner.UltimateChargeValue < 1.300, 1);
			disabled Event Player.CustomBotOwner.UltimateChargeValue = 0;
		Else;
			disabled Event Player.UltimateChargeValue += Max(Global.LobbySettingMinimumUltGain, Event Damage / Global.LobbySettingDivideUltGain);
			Event Player.UltimateChargeValue += Max(Global.LobbySettingMinimumUltGain, Event Damage / Global.LobbySettingDivideUltGain);
			disabled Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Player.UltimateChargeValue);
			disabled Skip If(Event Player.UltimateChargeValue < 1, 1);
			disabled Event Player.UltimateChargeValue = 0;
		End;
	}
}

rule("UltimateChargeConverter")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Is Dummy Bot(Event Player) == False;
		Event Player.UltimateChargeValue >= 1;
	}

	actions
	{
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Event Player.UltimateChargeValue);
		Event Player.UltimateChargeValue = 0;
		Wait(0.500, Abort When False);
		Loop If Condition Is True;
	}
}

rule("HealthPackHealDOT")
{
	event
	{
		Player Received Healing;
		All;
		All;
	}

	conditions
	{
		Event Was Health Pack == True;
	}

	actions
	{
		Clear Status(Event Player, Burning);
		Stop All Damage Over Time(Event Player);
	}
}

rule("onPlayerMakeKill")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		(Victim == Event Player.CustomBotOwner || Victim == Event Player.CustomBotDummyBot) != True;
		Event Ability != Button(Ultimate);
		Hero Of(Attacker) != Hero(Wrecking Ball);
	}

	actions
	{
		Wait(0.040, Ignore Condition);
		If(Is Dummy Bot(Event Player));
			Set Ultimate Charge(Event Player.CustomBotOwner, Ultimate Charge Percent(Event Player.CustomBotOwner)
				+ Global.LobbySettingGeneralChargeOnKill);
		Else;
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + Global.LobbySettingGeneralChargeOnKill);
		End;
	}
}

rule("KillGrantScore")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Dummy Bot(Victim) == False;
	}

	actions
	{
		If(Attacker == Victim);
			Modify Player Score(Event Player, -1);
		Else;
			Modify Player Score(Event Player, 1);
		End;
	}
}

rule("onPlayerJoin")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.GlobalHeroArray != 0;
		Is Dummy Bot(Event Player) == False;
		Event Player.LocalHeroArray == 0;
		Event Player.CanWriteToPlayerBoolean == True;
	}

	actions
	{
		Call Subroutine(selectNewHero);
		Call Subroutine(PlayerReset);
	}
}

rule("onPlayerDead")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.CalculatingDeath != True;
	}

	actions
	{
		Event Player.CalculatingDeath = True;
		Wait(0.050, Ignore Condition);
		Call Subroutine(selectNewHero);
		Wait(0.250, Ignore Condition);
		Call Subroutine(CleanDummyBots);
		disabled Wait(0.050, Ignore Condition);
		Call Subroutine(CleanObjects);
		disabled Wait(0.050, Ignore Condition);
		Call Subroutine(ClearBattleStats);
		Event Player.TakenTicks = 69;
		disabled Wait(0.050, Ignore Condition);
		Call Subroutine(InfoDestroy);
		disabled Event Player.KillSpree += 1;
		Event Player.CalculatingDeath = False;
	}
}

rule("onPlayerRespawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Event Player.RespawnState <= 0;
		Is Dummy Bot(Event Player) == False;
		Event Player.LocalHeroArray != 0;
		Event Player.CurrentHero != 0;
		Event Player.CanWriteToPlayerBoolean == True;
	}

	actions
	{
		"force player into new hero"
		Start Forcing Player To Be Hero(Event Player, Event Player.CurrentHero);
		disabled Create HUD Text(Event Player, Custom String("Respawn: {0}", Hero Icon String(Event Player.CurrentHero)), Null, Null, Left, 0,
			Color(White), Color(White), Color(White), None, Default Visibility);
		Wait(0.050, Ignore Condition);
		"reset player stats"
		Call Subroutine(PlayerReset);
		disabled Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		disabled Event Player.CustomBotDummyBot = Null;
		"initialise hero specific code"
		Event Player.RespawnState = 1;
		Wait(0.050, Ignore Condition);
		"disable hero specific code initialisers"
		Event Player.RespawnState = 2;
		Set Player Health(Event Player, 10000);
		Wait Until(Is Game In Progress, 2);
		Call Subroutine(InfoCreate);
		Set Ultimate Charge(Event Player, Event Player.WreckingBallUltBonus);
		Event Player.WreckingBallUltBonus = 0;
	}
}

disabled rule("StatModificationCode")
{
	event
	{
		Ongoing - Global;
	}
}

rule("MoveSpeedCalculator")
{
	event
	{
		Subroutine;
		MoveSpeedUpdate;
	}

	actions
	{
		disabled Event Player.MoveSpeedArray[Slot Of(Event Player) * 10 + 1] = 100;
		Disable Inspector Recording;
		If(Is Dummy Bot(Event Player));
			Event Player.MoveSpeedArray[0] = Event Player.CustomBotMoveSpeed;
		Else;
			Event Player.MoveSpeedArray[0] = 100;
		End;
		For Player Variable(Event Player, StatIndex, 1, Count Of(Event Player.MoveSpeedArray), 1);
			Event Player.MoveSpeedArray[0] += Event Player.MoveSpeedArray[Event Player.StatIndex];
		End;
		Set Move Speed(Event Player, Event Player.MoveSpeedArray[0]);
		Enable Inspector Recording;
	}
}

rule("DamageDealtCalculator")
{
	event
	{
		Subroutine;
		DamageDealtUpdate;
	}

	actions
	{
		disabled Event Player.MoveSpeedArray[Slot Of(Event Player) * 10 + 1] = 100;
		Disable Inspector Recording;
		If(Is Dummy Bot(Event Player));
			Event Player.DamageDealtArray[0] = Event Player.CustomBotDamageDealt;
		Else;
			Event Player.DamageDealtArray[0] = 100;
		End;
		For Player Variable(Event Player, StatIndex, 1, Count Of(Event Player.DamageDealtArray), 1);
			Event Player.DamageDealtArray[0] += Event Player.DamageDealtArray[Event Player.StatIndex];
		End;
		Set Damage Dealt(Event Player, Max(0.010, Event Player.DamageDealtArray[0]));
		Enable Inspector Recording;
	}
}

rule("DamageRecievedCalculator")
{
	event
	{
		Subroutine;
		DamageRecievedUpdate;
	}

	actions
	{
		disabled Event Player.MoveSpeedArray[Slot Of(Event Player) * 10 + 1] = 100;
		Disable Inspector Recording;
		If(Is Dummy Bot(Event Player));
			Event Player.DamageRecievedArray[0] = Event Player.CustomBotDamageTaken;
		Else;
			Event Player.DamageRecievedArray[0] = 100;
		End;
		For Player Variable(Event Player, StatIndex, 1, Count Of(Event Player.DamageRecievedArray), 1);
			Event Player.DamageRecievedArray[0] += Event Player.DamageRecievedArray[Event Player.StatIndex];
		End;
		Set Damage Received(Event Player, Max(0.010, Event Player.DamageRecievedArray[0]));
		Enable Inspector Recording;
	}
}

rule("MaxHealthCalculator")
{
	event
	{
		Subroutine;
		MaxHealthUpdate;
	}

	actions
	{
		disabled Event Player.MoveSpeedArray[Slot Of(Event Player) * 10 + 1] = 100;
		Disable Inspector Recording;
		If(Is Dummy Bot(Event Player));
			Event Player.MaxHealthArray[0] = Event Player.CustomBotMaximumHealth;
		Else;
			Event Player.MaxHealthArray[0] = 100;
		End;
		For Player Variable(Event Player, StatIndex, 1, Count Of(Event Player.MaxHealthArray), 1);
			Event Player.MaxHealthArray[0] += Event Player.MaxHealthArray[Event Player.StatIndex];
		End;
		Set Max Health(Event Player, Event Player.MaxHealthArray[0]);
		Enable Inspector Recording;
	}
}

rule("JumpVerticalCalculator")
{
	event
	{
		Subroutine;
		JumpVerticalUpdate;
	}

	actions
	{
		disabled Event Player.MoveSpeedArray[Slot Of(Event Player) * 10 + 1] = 100;
		Disable Inspector Recording;
		Event Player.JumpVerticalArray[0] = 100;
		For Player Variable(Event Player, StatIndex, 1, Count Of(Event Player.JumpVerticalArray), 1);
			Event Player.JumpVerticalArray[0] += Event Player.JumpVerticalArray[Event Player.StatIndex];
		End;
		Set Jump Vertical Speed(Event Player, Event Player.JumpVerticalArray[0]);
		Enable Inspector Recording;
	}
}

rule("VictimUpdate")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.StatUpdateCall != 0;
		Is Game In Progress == True;
	}

	actions
	{
		Call Subroutine(MoveSpeedUpdate);
		Call Subroutine(DamageDealtUpdate);
		Call Subroutine(DamageRecievedUpdate);
		Call Subroutine(MaxHealthUpdate);
		Call Subroutine(JumpVerticalUpdate);
		Event Player.StatUpdateCall = 0;
	}
}

disabled rule("objectCleanupCode")
{
	event
	{
		Ongoing - Global;
	}
}

rule("cleanupDummyBots")
{
	event
	{
		Subroutine;
		CleanDummyBots;
	}

	actions
	{
		Event Player.CustomBotDummyBot = Null;
		Destroy Dummy Bot(All Teams, Slot Of(Event Player) + 6);
	}
}

rule("cleanupTrash")
{
	event
	{
		Subroutine;
		CleanObjects;
	}

	actions
	{
		disabled Wait(0.050, Ignore Condition);
		disabled While(Count Of(Event Player.TrashArray) != Empty Array);
		While(Count Of(Event Player.TrashArray) > 0);
			Destroy Effect(Event Player.TrashArray[0]);
			Destroy HUD Text(Event Player.TrashArray[0]);
			Destroy Icon(Event Player.TrashArray[0]);
			Destroy In-World Text(Event Player.TrashArray[0]);
			Stop Damage Modification(Event Player.TrashArray[0]);
			Destroy Progress Bar HUD Text(Event Player.TrashArray[0]);
			Destroy Progress Bar In-World Text(Event Player.TrashArray[0]);
			Modify Player Variable(Event Player, TrashArray, Remove From Array By Index, 0);
			Global.TEMPObjectClearCounter += 1;
		End;
		disabled Loop If(Event Player.TrashArray != Empty Array);
	}
}

disabled rule("BossHealthBarCode")
{
	event
	{
		Ongoing - Global;
	}
}

rule("createBossBar")
{
	event
	{
		Subroutine;
		CreateBossBar;
	}

	actions
	{
		"abort if boss bar already exists"
		Abort If(Event Player.BossBarEnabled == True);
		Event Player.MaxHealthArray[Slot Of(Event Player) * 10 + 9] = -10000;
		Call Subroutine(MaxHealthUpdate);
		Add Health Pool To Player(Event Player, Health, Event Player.BossBarHealth - Max Health(Event Player), False, False);
		Event Player.BossBarEnabled = True;
		Create In-World Text(All Players(All Teams), Custom String("HP: {0}/{1}", Round To Integer(Health(Event Player), To Nearest),
			Event Player.BossBarHealth), Eye Position(Event Player) + Vector(0, 0.200, 0), 1, Clip Against Surfaces,
			Visible To Position and String, Color(Red), Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create Icon(All Players(All Teams), Eye Position(Event Player) + Vector(0, 0.300, 0), Skull, Visible To and Position, Color(Red),
			False);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Big Message(All Players(All Teams), Custom String("a boss has appeared: {0}", Hero Icon String(Hero Of(Event Player))));
	}
}

disabled rule("BattleScars")
{
	event
	{
		Ongoing - Global;
	}
}

rule("KillBattleScar")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	actions
	{
		Event Player.KillSpree += 1;
	}
}

rule("DamageBattleScar")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	actions
	{
		Event Player.DamageTotal += Event Damage;
		Event Player.DamageTicks += 1;
	}
}

rule("TakenBattleScar")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	actions
	{
		Event Player.TakenTotal += Event Damage;
		Event Player.TakenTicks += 1;
	}
}

disabled rule("BotHandlerCode")
{
	event
	{
		Ongoing - Global;
	}
}

rule("CreateBot")
{
	event
	{
		Subroutine;
		CreateCustomBot;
	}

	actions
	{
		Abort If(!Array Contains(All Heroes, Event Player.CustomBotHero));
		Abort If(Entity Exists(Players In Slot(Slot Of(Event Player) + 6, All Teams)) == True);
		Abort If(Is Dummy Bot(Event Player));
		Abort If(Count Of(Filtered Array(All Players(All Teams), Is Dummy Bot(Current Array Element) == False)) > 6);
		Create Dummy Bot(Event Player.CustomBotHero, All Teams, Slot Of(Event Player) + 6, Position Of(Event Player), Facing Direction Of(
			Event Player));
		Last Created Entity.CustomBotAutoAimEnabled = Event Player.CustomBotAutoAimEnabled;
		Last Created Entity.CustomBotOwner = Event Player;
		Event Player.CustomBotDummyBot = Last Created Entity;
		If(Event Player.CustomBotFriendlyFire == False);
			Start Damage Modification(Event Player, Event Player.CustomBotDummyBot, 1, None);
			Modify Player Variable(Event Player, TrashArray, Append To Array, Last Damage Modification ID);
			Start Damage Modification(Event Player.CustomBotDummyBot, Event Player, 1, None);
			Modify Player Variable(Event Player, TrashArray, Append To Array, Last Damage Modification ID);
		End;
		Last Created Entity.CustomBotHero = Event Player.CustomBotHero;
		Last Created Entity.CustomBotDetectionRange = Event Player.CustomBotDetectionRange;
		Last Created Entity.CustomBotTurnRate = Event Player.CustomBotTurnRate;
		Last Created Entity.CustomBotMaxAmmo = Event Player.CustomBotMaxAmmo;
		Last Created Entity.CustomBotInaccuracy = Event Player.CustomBotInaccuracy;
		Last Created Entity.CustomBotMoveSpeed = Event Player.CustomBotMoveSpeed;
		Last Created Entity.CustomBotDamageTaken = Event Player.CustomBotDamageTaken;
		Last Created Entity.CustomBotDamageDealt = Event Player.CustomBotDamageDealt;
		Last Created Entity.CustomBotMaximumHealth = Event Player.CustomBotMaximumHealth;
		Last Created Entity.StatUpdateCall = 6;
		Wait(0.150, Ignore Condition);
		Abort If(Event Player.CustomBotMaxAmmo == 0);
		Set Max Ammo(Last Created Entity, 0, Event Player.CustomBotMaxAmmo);
		Set Ammo(Last Created Entity, 0, Event Player.CustomBotMaxAmmo);
	}
}

rule("DestroyBotOnDead")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Wait(2.250, Ignore Condition);
		Abort If(Is Alive(Event Player));
		Event Player.CustomBotOwner.CustomBotDummyBot = Null;
		Destroy Dummy Bot(All Teams, Slot Of(Event Player));
	}
}

rule("CustomBotAllowcateKills")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Entity Exists(Event Player.CustomBotOwner) == True;
		Victim != Event Player.CustomBotOwner;
		Is Dummy Bot(Victim) == False;
	}

	actions
	{
		Modify Player Score(Event Player.CustomBotOwner, 1);
	}
}

disabled rule("HeroSpecificCode")
{
	event
	{
		Ongoing - Global;
	}
}

disabled rule("Orisa")
{
	event
	{
		Ongoing - Global;
	}
}

rule("OrisaInitialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Game In Progress == True;
		disabled Event Player.RespawnState == 1;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Orisa));
		Create HUD Text(Event Player, Custom String("Bonus Damage: +{0}%", Round To Integer(
			Event Player.DamageTicks * Global.LobbySettingOrisaBonusDamage, Up)), Null, Null, Top, 5, Color(Yellow), Color(Yellow), Color(
			Yellow), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Disallow Button(Event Player, Button(Ability 1));
		Event Player.DamageTicks = 0;
	}
}

rule("OrisaLowerDamage")
{
	event
	{
		Player Dealt Damage;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.DamageTicks > 0;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Wait(Workshop Setting Real(Custom String("Orisa"), Custom String("Bonus Damage Lower Delay"), 2, 0, 5, 0), Restart When True);
		While(Event Player.DamageTicks > 0);
			Event Player.DamageTicks -= Workshop Setting Real(Custom String("Orisa"), Custom String("Bonus Damage Reduction Amount"), 1, 0, 10,
				0) / Global.LobbySettingOrisaBonusDamage;
			Wait(Workshop Setting Real(Custom String("Orisa"), Custom String("Bonus Damage Lower Rate"), 0.200, 0, 5, 0), Restart When True);
			Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = Event Player.DamageTicks * Global.LobbySettingOrisaBonusDamage;
			Call Subroutine(DamageDealtUpdate);
			Global.TEMPOrisaDamageDown += 1;
		End;
	}
}

rule("OrisaDamageLimit")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Event Player.DamageTicks * Global.LobbySettingOrisaBonusDamage > Global.LobbySettingOrisaBonusLimit;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Event Player.DamageTicks = Global.LobbySettingOrisaBonusLimit / Global.LobbySettingOrisaBonusDamage;
	}
}

rule("OrisaDamageUpdate")
{
	event
	{
		Player Dealt Damage;
		All;
		Orisa;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = Event Player.DamageTicks * Global.LobbySettingOrisaBonusDamage;
		Call Subroutine(DamageDealtUpdate);
	}
}

rule("OrisaDamageLimitOnHacked")
{
	event
	{
		Ongoing - Each Player;
		All;
		Orisa;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
		Is Dummy Bot(Event Player) == False;
		Event Player.DamageTicks > 0;
	}

	actions
	{
		Event Player.DamageTicks = 0;
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = Event Player.DamageTicks * Global.LobbySettingOrisaBonusDamage;
		Call Subroutine(DamageDealtUpdate);
	}
}

rule("OrisaAbilityOneOnDamage")
{
	event
	{
		Player Took Damage;
		All;
		Orisa;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Game In Progress == True;
		disabled Event Player.RespawnState == 1;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Allow Button(Event Player, Button(Ability 1));
		Press Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 1));
	}
}

disabled rule("Mei")
{
	event
	{
		Ongoing - Global;
	}
}

rule("MeiInitialize")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Mei));
		Disallow Button(Event Player, Button(Ultimate));
	}
}

rule("MeiBlockUltimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mei;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Stunned) == False;
		Has Status(Event Player, Frozen) == False;
	}

	actions
	{
		Cancel Primary Action(Event Player);
		Global.MeiBlizzardDuration = Global.MeiBlizzardDuration + Workshop Setting Integer(Custom String("Mei"), Custom String(
			"Ultimate Duration"), 10, 0, 100, 0);
		Set Ultimate Charge(Event Player, 0);
	}
}

rule("MeiUltimateDuration")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.MeiBlizzardDuration > 0;
	}

	actions
	{
		Wait(1, Abort When False);
		Global.MeiBlizzardDuration -= 1;
		Loop If Condition Is True;
	}
}

rule("MeiPrimaryFreeze")
{
	event
	{
		Player Dealt Damage;
		All;
		Mei;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Firing Primary(Event Player) == True;
		Has Status(Event Player, Hacked) == False;
		Global.MeiBlizzardDuration == 0;
		Hero Of(Victim) != Hero(Mei);
	}

	actions
	{
		Wait(Workshop Setting Real(Custom String("Mei"), Custom String("Primary Freeze Delay"), 0.350, 0, 1, 0), Abort When False);
		Set Status(Victim, Attacker, Frozen, Workshop Setting Real(Custom String("Mei"), Custom String("Primary Freeze Duration"), 0.200,
			0, 1, 0));
		Loop If Condition Is True;
	}
}

rule("MeiSecondaryFreeze")
{
	event
	{
		Player Dealt Damage;
		All;
		Mei;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Ability == Button(Secondary Fire);
		Has Status(Event Player, Hacked) == False;
		Global.MeiBlizzardDuration == 0;
		Hero Of(Victim) != Hero(Mei);
	}

	actions
	{
		Set Status(Victim, Attacker, Frozen, Workshop Setting Real(Custom String("Mei"), Custom String("Secondary Freeze Duration"), 0.700,
			0, 1, 0));
	}
}

rule("MeiGlobalFreeze")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Global.MeiBlizzardDuration > 0;
		Hero Of(Victim) != Hero(Mei);
		Has Status(Victim, Frozen) == False;
	}

	actions
	{
		Wait(Workshop Setting Real(Custom String("Mei"), Custom String("Ultimate Freeze Delay"), 0.150, 0, 1, 0), Abort When False);
		Set Status(Victim, Attacker, Frozen, Workshop Setting Real(Custom String("Mei"), Custom String("Ultimate Freeze Duration"), 0.200,
			0, 1, 0));
		disabled Loop If Condition Is True;
	}
}

rule("MeiGlobalInitialise")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(Global.MeiBlizzardDuration > 0 ? All Players(All Teams) : Null, Custom String("{1}Mei's Winter: {0}{1}",
			Global.MeiBlizzardDuration, Ability Icon String(Hero(Mei), Button(Ultimate))), Null, Null, Top, 0, Color(Aqua), Color(White),
			Color(White), Visible To and String, Default Visibility);
	}
}

rule("MeiGainUltCharge")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Status(Event Player, Frozen) == True;
	}

	actions
	{
		Players On Hero(Hero(Mei), All Teams).UltimateChargeValue += 2;
	}
}

disabled rule("Mcree")
{
	event
	{
		Ongoing - Global;
	}
}

rule("McreeInitialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(McCree));
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = -5000;
		Call Subroutine(DamageDealtUpdate);
	}
}

rule("McreeKillsOnHeadshot")
{
	event
	{
		Player Dealt Damage;
		All;
		McCree;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Event Was Critical Hit == True;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		If(Hero Of(Victim) == Hero(Zarya) && Victim.ZaryaReflectDuration > 0);
			Kill(Event Player, Victim);
			Abort;
		End;
		Kill(Victim, Event Player);
	}
}

rule("McreeHeadshotImmunity")
{
	event
	{
		Player Took Damage;
		All;
		McCree;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Event Was Critical Hit == True;
		Has Status(Event Player, Hacked) == False;
		Is Dummy Bot(Attacker) == False;
	}

	actions
	{
		Kill(Event Player, Attacker);
	}
}

rule("McreeHealOnDamage")
{
	event
	{
		Player Took Damage;
		All;
		McCree;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Health(Event Player) < Max Health(Event Player);
		Has Status(Event Player, Hacked) == False;
		Health(Event Player) != 1;
	}

	actions
	{
		Heal(Event Player, Null, Max Health(Event Player));
		Wait(0.200, Abort When False);
		Loop If Condition Is True;
	}
}

rule("McreeUsesUlt")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == True;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = 0;
		Call Subroutine(DamageDealtUpdate);
	}
}

rule("McreeUsedUlt")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Is Using Ultimate(Event Player) == False;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = -5000;
		Call Subroutine(DamageDealtUpdate);
	}
}

rule("mccreeHacked")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Has Status(Event Player, Hacked) == True;
	}

	actions
	{
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = 0;
		Call Subroutine(DamageDealtUpdate);
	}
}

rule("mccreeNoLongerHacked")
{
	event
	{
		Ongoing - Each Player;
		All;
		McCree;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = -5000;
		Call Subroutine(DamageDealtUpdate);
	}
}

disabled rule("Sombra")
{
	event
	{
		Ongoing - Global;
	}
}

rule("SombraReveal")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Wait(Workshop Setting Integer(Custom String("Sombra"), Custom String("Invisibility Time Limit"), 8, 0, 100, 0), Restart When True);
		Abort If Condition Is False;
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("SombraInitialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Event Player.SombraRevealing != True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Sombra));
		Disallow Button(Event Player, Button(Ultimate));
		Event Player.SombraUsingUltimate = False;
	}
}

rule("SombraUsesUltimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.SombraUsingUltimate != True;
		Event Player.SombraRevealing != True;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		disabled Set Ultimate Charge(Event Player, 0);
		Event Player.SombraRerollAvailable = Workshop Setting Integer(Custom String("Sombra"), Custom String("Ultimate Rerolls available"),
			3, 0, 10, 0);
		Event Player.SombraAvailableHeroes = Global.GlobalHeroArray;
		If(Count Of(Filtered Array(All Players(All Teams), !Is Dummy Bot(Event Player))) > 6);
			Event Player.SombraAvailableHeroes = Filtered Array(Global.GlobalHeroArray, !Array Contains(Global.GlobalCustomBotHeroArray,
				Current Array Element));
		End;
		Modify Player Variable(Event Player, SombraAvailableHeroes, Remove From Array By Value, Hero(Sombra));
		Event Player.SombraAvailableHeroes = Array Slice(Randomized Array(Event Player.SombraAvailableHeroes), 0, 2);
		Wait(0.050, Ignore Condition);
		Create HUD Text(Event Player, Custom String("{0} Choose! {1}", Hero Icon String(Event Player.SombraAvailableHeroes[0]),
			Hero Icon String(Event Player.SombraAvailableHeroes[1])), Null, Null, Top, 7, Color(Purple), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Null, Custom String("Use primary and secondary fire while holding ultimate to select!"),
			Custom String("{0}", Event Player.SombraRerollAvailable > 1 ? Custom String("{0} rerolls available! press interact!",
			Event Player.SombraRerollAvailable) : (Event Player.SombraRerollAvailable == 1 ? Custom String(
			"1 reroll available! press interact!") : Custom String("No more rerolls available"))), Top, 8, Color(Purple), Color(White),
			Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		disabled Disallow Button(Event Player, Button(Primary Fire));
		disabled Disallow Button(Event Player, Button(Secondary Fire));
		Wait(1, Ignore Condition);
		Event Player.SombraUsingUltimate = True;
	}
}

rule("SombraSelectsCharacter")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		disabled Ultimate Charge Percent(Event Player) == 100;
		Event Player.SombraUsingUltimate == True;
		(Is Button Held(Event Player, Button(Primary Fire)) || Is Button Held(Event Player, Button(Secondary Fire))) == True;
		Hero Of(Event Player) == Hero(Sombra);
		Event Player.CurrentHero == Hero(Sombra);
		Event Player.SombraRevealing != True;
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Start Forcing Player To Be Hero(Event Player, Event Player.SombraAvailableHeroes[0]);
			Abort If(Array Contains(All Heroes, Event Player.SombraAvailableHeroes[0]) == False);
		Else;
			Start Forcing Player To Be Hero(Event Player, Event Player.SombraAvailableHeroes[1]);
			Abort If(Array Contains(All Heroes, Event Player.SombraAvailableHeroes[1]) == False);
		End;
		Set Ultimate Charge(Event Player, 0);
		Event Player.SombraRerollAvailable = 0;
		Event Player.SombraAvailableHeroes = 0;
		Event Player.SombraUsingUltimate = 0;
		Call Subroutine(CleanDummyBots);
		Call Subroutine(CleanObjects);
		Call Subroutine(PlayerReset);
		Call Subroutine(ClearBattleStats);
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 8] = Workshop Setting Integer(Custom String("Sombra"), Custom String(
			"Illusion Damage Dealt Modifier"), -50, -100, 100, 0);
		Event Player.DamageRecievedArray[Slot Of(Event Player) * 10 + 8] = Workshop Setting Integer(Custom String("Sombra"), Custom String(
			"Illusion Damage Taken Modifier"), 50, -100, 100, 0);
		Call Subroutine(DamageDealtUpdate);
		Call Subroutine(DamageRecievedUpdate);
		Set Status(Event Player, Null, Unkillable, 9999);
		Event Player.SombraRevealing = False;
		Preload Hero(Event Player, Hero(Sombra));
		Call Subroutine(InfoCreate);
	}
}

rule("SombraReroll")
{
	event
	{
		Ongoing - Each Player;
		All;
		Sombra;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		disabled Ultimate Charge Percent(Event Player) == 100;
		Event Player.SombraUsingUltimate == True;
		Is Button Held(Event Player, Button(Interact)) == True;
		disabled Hero Of(Event Player) == Hero(Sombra);
		disabled Event Player.CurrentHero == Hero(Sombra);
		Event Player.SombraRerollAvailable > 0;
		Event Player.SombraRevealing != True;
	}

	actions
	{
		Event Player.SombraAvailableHeroes = Global.GlobalHeroArray;
		If(Count Of(Filtered Array(All Players(All Teams), !Is Dummy Bot(Event Player))) > 6);
			Event Player.SombraAvailableHeroes = Filtered Array(Global.GlobalHeroArray, !Array Contains(Global.GlobalCustomBotHeroArray,
				Current Array Element));
		End;
		Modify Player Variable(Event Player, SombraAvailableHeroes, Remove From Array By Value, Hero(Sombra));
		Event Player.SombraAvailableHeroes = Array Slice(Randomized Array(Event Player.SombraAvailableHeroes), 0, 2);
		Event Player.SombraRerollAvailable -= 1;
	}
}

rule("SombraRevealUponDeath")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		disabled Hero Of(Event Player) != Hero(Sombra);
		Has Status(Event Player, Unkillable) == True;
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Event Player.CurrentHero == Hero(Sombra);
		Event Player.SombraRevealing == False;
		Health(Event Player) == 1;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Event Player.SombraRevealing = True;
		Set Invisible(Event Player, All);
		Call Subroutine(ClearBattleStats);
		Call Subroutine(CleanDummyBots);
		Call Subroutine(CleanObjects);
		Call Subroutine(PlayerReset);
		Wait(0.016, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, Hero(Sombra));
		While(Is Using Ultimate(Event Player) == False);
			Set Status(Event Player, Null, Phased Out, 0.500);
			Set Status(Event Player, Null, Rooted, 0.500);
			Clear Status(Event Player, Unkillable);
			disabled Wait(0.250, Ignore Condition);
			Set Ultimate Charge(Event Player, 100);
			Press Button(Event Player, Button(Ultimate));
			Global.TEMPSombraUltSpam += 1;
			Wait(0.350, Ignore Condition);
		End;
		Set Invisible(Event Player, None);
		Event Player.SombraRevealing = 0;
		Clear Status(Event Player, Phased Out);
		Clear Status(Event Player, Rooted);
		Set Ultimate Charge(Event Player, 0);
		Call Subroutine(CleanDummyBots);
		Call Subroutine(CleanObjects);
		Call Subroutine(PlayerReset);
		Call Subroutine(ClearBattleStats);
		Set Ultimate Charge(Event Player, Event Player.WreckingBallUltBonus);
		Event Player.WreckingBallUltBonus = 0;
	}
}

rule("SombraDeathWhenHacked")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		disabled Hero Of(Event Player) != Hero(Sombra);
		Has Status(Event Player, Unkillable) == True;
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Event Player.CurrentHero == Hero(Sombra);
		Event Player.SombraRevealing == False;
		Health(Event Player) == 1;
		Has Status(Event Player, Hacked) == True;
	}

	actions
	{
		Event Player.SombraRevealing = 0;
		Call Subroutine(CleanDummyBots);
		Call Subroutine(CleanObjects);
		Call Subroutine(PlayerReset);
		Call Subroutine(ClearBattleStats);
		Wait(0.016, Ignore Condition);
		Start Forcing Player To Be Hero(Event Player, Hero(Sombra));
		Clear Status(Event Player, Unkillable);
		disabled Kill(Event Player, Attacker);
		Wait(0.100, Ignore Condition);
		Set Ultimate Charge(Event Player, Event Player.WreckingBallUltBonus);
		Event Player.WreckingBallUltBonus = 0;
	}
}

rule("SombraUltChargeHackedTarget")
{
	event
	{
		Player Dealt Damage;
		All;
		Sombra;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Has Status(Victim, Hacked) == True;
	}

	actions
	{
		Event Player.UltimateChargeValue += 2;
	}
}

disabled rule("Moira")
{
	event
	{
		Ongoing - Global;
	}
}

rule("MoiraInitialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Moira));
		Event Player.MoiraBeamID = Empty Array;
	}
}

rule("MoiraDrainUlt")
{
	event
	{
		Player Dealt Damage;
		All;
		Moira;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Ability != Button(Ultimate);
		Is Using Ultimate(Event Player) == False;
		Has Status(Event Player, Hacked) == False;
		Is Alive(Event Player) == True;
	}

	actions
	{
		If(Ultimate Charge Percent(Victim) > 0);
			"drain ult charge"
			Set Ultimate Charge(Victim, Ultimate Charge Percent(Victim) - 1);
			Set Ultimate Charge(Attacker, Ultimate Charge Percent(Attacker) + 1);
		Else;
			Abort If(Hero Of(Victim) == Hero(Moira));
			Abort If(Hero Of(Event Player) == Hero(Tracer) && Event Player.TracerBombStack > 0);
			Set Status(Victim, Event Player, Hacked, 1);
		End;
	}
}

rule("MoiraUltHack")
{
	event
	{
		Player Dealt Damage;
		All;
		Moira;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Ability == Button(Ultimate);
		Is Using Ultimate(Event Player) == True;
		Hero Of(Victim) != Hero(Moira);
	}

	actions
	{
		Set Status(Victim, Attacker, Hacked, 6);
	}
}

rule("MoiraHackUnstable")
{
	event
	{
		Ongoing - Each Player;
		All;
		Moira;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Wait(Random Real(0.100, 0.240), Abort When False);
		Play Effect(All Players(All Teams), Good Explosion, Color(Violet), Position Of(Event Player) + Vector(Random Real(-1, 1),
			Random Real(0, 2), Random Real(-1, 1)), Random Real(0.500, 2));
		Loop If Condition Is True;
	}
}

rule("MoiraHackExplosion")
{
	event
	{
		Player Took Damage;
		All;
		Moira;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Bad Beam, Event Player, Attacker, Color(Purple), Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Clear Status(Event Player, Hacked);
		Modify Player Variable(Event Player, MoiraBeamID, Append To Array, Last Created Entity);
		Wait(0.450, Ignore Condition);
		While(Count Of(Event Player.MoiraBeamID) > 0);
			Destroy Effect(Event Player.MoiraBeamID[0]);
			Modify Player Variable(Event Player, MoiraBeamID, Remove From Array By Index, 0);
			Global.TEMPMoiraClean += 1;
		End;
		Play Effect(All Players(All Teams), Ring Explosion, Color(Purple), Position Of(Event Player), 20);
		Set Status(Attacker, Event Player, Hacked, 10);
	}
}

disabled rule("Doomfist")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}
}

rule("DoomfistInitialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Event Player.SombraRevealing != True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Doomfist));
		Event Player.DoomfistArenaLocation = 0;
		Event Player.DoomfistTargetList = 0;
		Event Player.DoomfistAreaBounce = 0;
		Event Player.DoomfistArenaTimer = 0;
		Create HUD Text(Is Using Ultimate(Event Player) ? Event Player : Null, Custom String("Arena Targets: {0}", Max(0, Count Of(
			Players Within Radius(Eye Position(Event Player), Global.LobbySettingDoomfistAreaSize, All Teams, Surfaces)) - 1)), Null, Null,
			Top, 5, Color(Blue), Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create Effect(Is Using Ultimate(Event Player) ? Event Player : Null, Ring, Color(Sky Blue), Position Of(Event Player),
			Global.LobbySettingDoomfistAreaSize, Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
	}
}

rule("DoomfistUltimateArenaCreate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		disabled Event Player.DoomfistArenaTrash = Empty Array;
		Event Player.DoomfistArenaLocation = 0;
		Event Player.DoomfistTargetList = 0;
		Event Player.DoomfistAreaBounce = 0;
		Event Player.DoomfistArenaTimer = 0;
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = -99999;
		Call Subroutine(DamageDealtUpdate);
		Wait Until(!Is Using Ultimate(Event Player), 999999);
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = 0;
		Call Subroutine(DamageDealtUpdate);
		Event Player.DoomfistArenaLocation = Position Of(Event Player);
		Event Player.DoomfistTargetList = Filtered Array(Players Within Radius(Eye Position(Event Player),
			Global.LobbySettingDoomfistAreaSize, All Teams, Surfaces), !Is Dummy Bot(Current Array Element));
		Abort If(Count Of(Event Player.DoomfistTargetList) < 2);
		Event Player.DoomfistArenaTimer = Workshop Setting Integer(Custom String("Doomfist"), Custom String("Ult Arena Duration"), 12, 1,
			60, 0);
		Create Effect(Event Player.DoomfistTargetList, Sphere, Custom Color(40, 100, 180, 255), Event Player.DoomfistArenaLocation,
			Global.LobbySettingDoomfistAreaSize, Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Modify Player Variable(Event Player, DoomfistArenaTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Ring, Custom Color(40, 100, 180, 255), Event Player.DoomfistArenaLocation,
			Global.LobbySettingDoomfistAreaSize, Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Modify Player Variable(Event Player, DoomfistArenaTrash, Append To Array, Last Created Entity);
		Big Message(Event Player.DoomfistTargetList, Custom String("Ready?   Fight!"));
	}
}

rule("DoomfistSphereBounceCheck")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == False;
		Is Dummy Bot(Event Player) == False;
		Event Player.DoomfistArenaTimer > 0;
		Event Player.DoomfistAreaBounce == 0;
		Event Player.DoomfistArenaLocation != 0;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Filtered Array(Event Player.DoomfistTargetList, Distance Between(Event Player.DoomfistArenaLocation, Position Of(
			Current Array Element)) >= Global.LobbySettingDoomfistAreaSize).DoomfistAreaBounce = Event Player.DoomfistArenaLocation;
		Event Player.DoomfistTargetList = Filtered Array(All Living Players(All Teams), Array Contains(Event Player.DoomfistTargetList,
			Current Array Element));
		Loop If Condition Is True;
	}
}

rule("DoomfistSphereBounceImpulse")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.DoomfistAreaBounce != 0;
	}

	actions
	{
		If(Distance Between(Position Of(Event Player), Event Player.DoomfistAreaBounce) < 20);
			Apply Impulse(Event Player, Direction Towards(Position Of(Event Player), Event Player.DoomfistAreaBounce) + Vector(0, 0.200, 0),
				20, To World, Cancel Contrary Motion);
		Else;
			Teleport(Event Player, Event Player.DoomfistAreaBounce);
			Set Status(Event Player, Null, Stunned, 0.100);
			Big Message(Event Player, Custom String("No Quitting!"));
		End;
		Wait(0.250, Ignore Condition);
		Event Player.DoomfistAreaBounce = 0;
	}
}

rule("DoomfistTimerDown")
{
	event
	{
		Ongoing - Each Player;
		All;
		Doomfist;
	}

	conditions
	{
		Event Player.DoomfistArenaTimer > 0;
		Is Alive(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Count Of(Event Player.DoomfistTargetList) > 1;
	}

	actions
	{
		Event Player.DoomfistArenaTimer -= 1;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		If(Count Of(Event Player.DoomfistTargetList) == 1);
			Big Message(Event Player.DoomfistTargetList[0], Custom String("Fatality!"));
			Set Ultimate Charge(Event Player.DoomfistTargetList[0], 100);
		End;
		"if any condition fails, stop arena"
		Call Subroutine(DoomfistBreakArena);
	}
}

rule("DoomfistArenaBreakRoutine")
{
	event
	{
		Subroutine;
		DoomfistBreakArena;
	}

	actions
	{
		Event Player.DoomfistArenaLocation = 0;
		Event Player.DoomfistTargetList = 0;
		Event Player.DoomfistAreaBounce = 0;
		Event Player.DoomfistArenaTimer = 0;
		While(Count Of(Event Player.DoomfistArenaTrash) > 0);
			Destroy Effect(Event Player.DoomfistArenaTrash[0]);
			Modify Player Variable(Event Player, DoomfistArenaTrash, Remove From Array By Index, 0);
			Global.TEMPDoomClean += 1;
		End;
	}
}

rule("DoomfistAbilityGainUlt")
{
	event
	{
		Player Dealt Damage;
		All;
		Doomfist;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		(Event Ability == Button(Secondary Fire) || Event Ability == Button(Ability 1) || Event Ability == Button(Ability 2)) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 6);
	}
}

disabled rule("Reinharth")
{
	event
	{
		Ongoing - Global;
	}
}

rule("HammerGlobalInitialise")
{
	event
	{
		Subroutine;
		ReinOnGameInitialise;
	}

	actions
	{
		"if not populated, use default spawn list"
		If(Global.HammerLocations == 0);
			Global.HammerLocations = Spawn Points(All Teams);
		End;
		Call Subroutine(HammerPrepareNewSpawn);
		Global.HammerRadius = Workshop Setting Real(Custom String("Hammer"), Custom String("Checkpoint Radius"), 6, 2, 30, 0);
		Global.HammerReinList = Empty Array;
		Global.HammerCaptureGoal = Workshop Setting Integer(Custom String("Hammer"), Custom String("Checkpoint Goal"), 100, 0, 1200, 0);
	}
}

rule("HammerPrepareNew")
{
	event
	{
		Subroutine;
		HammerPrepareNewSpawn;
	}

	actions
	{
		Global.HammerCurrentLoc = Random Value In Array(Global.HammerLocations);
		Global.HammerSpawnDelay = Random Integer(Workshop Setting Integer(Custom String("Hammer"), Custom String("Minimum Delay"), 10, 0,
			60, 0), Workshop Setting Integer(Custom String("Hammer"), Custom String("Maximum Delay"), 40, 0, 60, 0));
		Global.HammerCaptureStatus = 0;
		Global.HammerReinList = Empty Array;
	}
}

rule("HammerCountdown")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.HammerSpawnDelay > 0;
		Count Of(Filtered Array(Players On Hero(Hero(Reinhardt), All Teams), Is Dummy Bot(Current Array Element) == False)) > 0;
		Global.HammerBuffDuration == 0;
	}

	actions
	{
		Wait(1, Abort When False);
		Global.HammerSpawnDelay -= 1;
		Loop If Condition Is True;
	}
}

rule("HammerDestroy")
{
	event
	{
		Subroutine;
		HammerDestroy;
	}

	actions
	{
		While(Count Of(Global.HammerEffectTrash) > 0);
			Destroy Effect(Global.HammerEffectTrash[0]);
			Destroy Icon(Global.HammerEffectTrash[0]);
			Destroy In-World Text(Global.HammerEffectTrash[0]);
			Destroy In-World Text(Global.HammerEffectTrash[0]);
			Destroy Progress Bar In-World Text(Global.HammerEffectTrash[0]);
			Destroy Progress Bar HUD Text(Global.HammerEffectTrash[0]);
			Modify Global Variable(HammerEffectTrash, Remove From Array By Index, 0);
			Global.TEMPHammerClean += 1;
		End;
		Play Effect(All Players(All Teams), Good Explosion, Color(Yellow), Global.HammerCurrentLoc, 8);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Global.HammerCurrentLoc, 15);
	}
}

rule("HammerResetOnNoReins")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(Players On Hero(Hero(Reinhardt), All Teams), Is Dummy Bot(Current Array Element) == False)) <= 0;
	}

	actions
	{
		Call Subroutine(HammerDestroy);
		Call Subroutine(HammerPrepareNewSpawn);
	}
}

rule("HammerSpawn")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Filtered Array(Players On Hero(Hero(Reinhardt), All Teams), Is Dummy Bot(Current Array Element) == False)) > 0;
		Global.HammerSpawnDelay == 0;
		Global.HammerBuffDuration == 0;
		Global.HammerHolder == 0;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Hammer Spawned!"));
		Create Effect(All Players(All Teams), Ring, Color(Gray), Global.HammerCurrentLoc, Global.HammerRadius,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Ring, Color(Gray), Global.HammerCurrentLoc, Global.HammerRadius,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Ring, Color(Gray), Global.HammerCurrentLoc, Global.HammerRadius,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Icon(Global.HammerCaptureStatus == 0 ? Filtered Array(All Players(All Teams), Distance Between(Eye Position(
			Current Array Element), Global.HammerCurrentLoc) > Global.HammerRadius) : Null, Global.HammerCurrentLoc, Flag,
			Visible To and Position, Color(Yellow), True);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Progress Bar In-World Text(Global.HammerCaptureStatus > 0 ? Filtered Array(All Players(All Teams), Distance Between(
			Position Of(Current Array Element), Global.HammerCurrentLoc) > Global.HammerRadius) : Null,
			Global.HammerCaptureStatus / Global.HammerCaptureGoal * 100, Custom String("Hammer Capture"), Global.HammerCurrentLoc, 1,
			Do Not Clip, Global.HammerCaptureStatus % 2 == 0 ? Color(Yellow) : Color(Gray), Color(Gray),
			Visible To Position Values and Color, Default Visibility);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Text ID);
		Create Progress Bar HUD Text(Global.HammerCaptureStatus > 0 ? Players Within Radius(Global.HammerCurrentLoc, Global.HammerRadius,
			All Teams, Off) : Null, Global.HammerCaptureStatus / Global.HammerCaptureGoal * 100, Custom String("Hammer Capture"), Top, 4,
			Global.HammerCaptureStatus % 2 == 0 ? Color(Yellow) : Color(Gray), Color(Gray), Visible To Values and Color,
			Default Visibility);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Text ID);
		Play Effect(All Players(All Teams), Ring Explosion, Color(Yellow), Global.HammerCurrentLoc, 15);
		Create Beam Effect(All Players(All Teams), Good Beam, Global.HammerCurrentLoc + Vector(0, -0.500, 0),
			Global.HammerCurrentLoc + Vector(0, 2, 0), Custom Color(255, 255, 255, 180), Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.HammerCurrentLoc + Vector(0.380, 2, 0), 0.380,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.HammerCurrentLoc + Vector(0.100, 2, 0), 0.250,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(White), Global.HammerCurrentLoc + Vector(-0.200, 2, 0), 0.250,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Orange), Global.HammerCurrentLoc + Vector(-0.340, 1.940, 0.110), 0.120,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Orange), Global.HammerCurrentLoc + Vector(-0.340, 1.940, -0.110), 0.120,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Orange), Global.HammerCurrentLoc + Vector(-0.340, 2.080, 0), 0.120,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Sparkles, Color(Yellow), Global.HammerCurrentLoc + Vector(0, 0.800, 0), 0.500,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Sparkles, Color(Yellow), Global.HammerCurrentLoc + Vector(0, 0, 0), 1,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Sparkles, Color(Yellow), Global.HammerCurrentLoc + Vector(0, 1.600, 0), 1,
			Visible To Position and Radius);
		Modify Global Variable(HammerEffectTrash, Append To Array, Last Created Entity);
	}
}

rule("HammerReinEntersCheckpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Game In Progress == True;
		Array Contains(Global.HammerReinList, Event Player) == False;
		Distance Between(Position Of(Event Player), Global.HammerCurrentLoc) <= Global.HammerRadius;
		Global.HammerSpawnDelay <= 0;
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Global.HammerBuffDuration == 0;
	}

	actions
	{
		Modify Global Variable(HammerReinList, Append To Array, Event Player);
	}
}

rule("HammerReinLeavesCheckpoint")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Game In Progress == True;
		Array Contains(Global.HammerReinList, Event Player) == True;
		Distance Between(Position Of(Event Player), Global.HammerCurrentLoc) > Global.HammerRadius;
		disabled Global.HammerSpawnDelay <= 0;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Modify Global Variable(HammerReinList, Remove From Array By Value, Event Player);
	}
}

rule("HammerReinChangesHero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Game In Progress == True;
		Array Contains(Global.HammerReinList, Event Player) == True;
		Hero Of(Event Player) != Hero(Reinhardt);
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Modify Global Variable(HammerReinList, Remove From Array By Value, Event Player);
	}
}

rule("HammerReinDies")
{
	event
	{
		Player Died;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Game In Progress == True;
		Array Contains(Global.HammerReinList, Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Modify Global Variable(HammerReinList, Remove From Array By Value, Event Player);
	}
}

rule("HammerCapturing")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Global.HammerReinList) == 1;
		Global.HammerCaptureStatus < Global.HammerCaptureGoal;
		Global.HammerBuffDuration == 0;
	}

	actions
	{
		Wait(0.050, Abort When False);
		Global.HammerCaptureStatus += 1;
		Loop If Condition Is True;
	}
}

rule("HammerLoseProgress")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Global.HammerReinList) == 0;
		Global.HammerCaptureStatus < Global.HammerCaptureGoal;
		Global.HammerCaptureStatus > 0;
		Global.HammerBuffDuration == 0;
	}

	actions
	{
		Wait(Workshop Setting Real(Custom String("Hammer"), Custom String("Backprogress Delay"), 3, 0, 10, 0), Abort When False);
		While(Global.HammerCaptureStatus > 0);
			Abort If Condition Is False;
			Global.HammerCaptureStatus -= 1;
			Wait(Workshop Setting Real(Custom String("Hammer"), Custom String("Backprogress Speed"), 0.100, 0, 1, 0), Abort When False);
			Global.TEMPHammerUnCapture += 1;
		End;
	}
}

rule("HammerCaptured")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Count Of(Global.HammerReinList) == 1;
		Global.HammerCaptureStatus >= Global.HammerCaptureGoal;
		Global.HammerHolder == 0;
	}

	actions
	{
		Global.HammerHolder = Global.HammerReinList[0];
		Global.HammerBuffDuration = Workshop Setting Integer(Custom String("Hammer"), Custom String("Buff Duration"), 15, 1, 30, 0);
		Call Subroutine(HammerDestroy);
		Big Message(All Players(All Teams), Custom String("Hammertime!"));
		Heal(Global.HammerHolder, Null, 2000);
	}
}

rule("HammerBuffCountdown")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.HammerBuffDuration > 0;
	}

	actions
	{
		Global.HammerBuffDuration -= 1;
		Wait(1, Ignore Condition);
		Loop If Condition Is True;
		Call Subroutine(HammerPrepareNewSpawn);
		Wait(0.250, Ignore Condition);
		Global.HammerHolder = 0;
	}
}

rule("HammerBuffHammerDown")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Global.HammerBuffDuration > 0;
		Hero Of(Global.HammerHolder) == Hero(Reinhardt);
		Ultimate Charge Percent(Global.HammerHolder) != 100;
	}

	actions
	{
		disabled Set Ultimate Ability Enabled(Global.HammerHolder, True);
		Set Ultimate Charge(Global.HammerHolder, 100);
		disabled Press Button(Global.HammerHolder, Button(Ultimate));
		disabled Set Ultimate Ability Enabled(Global.HammerHolder, False);
		disabled Wait(0.150, Abort When False);
		disabled Loop If Condition Is True;
	}
}

rule("ReinApplySpeedbuff")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Event Player == Global.HammerHolder;
		Global.HammerBuffDuration > 0;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Global.HammerHolder.MoveSpeedArray[Slot Of(Global.HammerHolder) * 10 + 6] = 200;
		Call Subroutine(MoveSpeedUpdate);
	}
}

rule("ReinRemoveSpeedbuff")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		(Is Alive(Event Player) == False || Global.HammerBuffDuration == 0) == True;
		Event Player == Global.HammerHolder;
	}

	actions
	{
		Global.HammerHolder.MoveSpeedArray[Slot Of(Global.HammerHolder) * 10 + 6] = 0;
		Call Subroutine(MoveSpeedUpdate);
	}
}

rule("ReinUltKnockback")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Reinhardt);
		Event Ability == Button(Ultimate);
		Attacker == Global.HammerHolder;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Apply Impulse(Event Player, Direction Towards(Position Of(Attacker), Position Of(Event Player) + Vector(0, 0.400, 0)), 80,
			To World, Cancel Contrary Motion);
		Damage(Event Player, Attacker, 150);
	}
}

rule("HammerResetOnCarrierDeath")
{
	event
	{
		Player Died;
		All;
		All;
	}

	conditions
	{
		Global.HammerBuffDuration > 0;
		Event Player == Global.HammerHolder;
	}

	actions
	{
		Global.HammerBuffDuration = 0;
	}
}

rule("HammerResetOnCarrierChange")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Global.HammerBuffDuration > 0;
		Event Player == Global.HammerHolder;
		Hero Of(Event Player) != Hero(Reinhardt);
	}

	actions
	{
		Global.HammerBuffDuration = 0;
	}
}

rule("ReinharthInitialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reinhardt;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Reinhardt));
		disabled Set Ultimate Ability Enabled(Event Player, False);
		Add Health Pool To Player(Event Player, Shields, 280, True, False);
	}
}

disabled rule("Ana")
{
	event
	{
		Ongoing - Global;
	}
}

rule("AnaIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Ana));
		Disallow Button(Event Player, Button(Ability 1));
	}
}

rule("AnaSleepOnDamage")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Ana);
		Event Damage > 1;
		Is Dummy Bot(Attacker) == False;
		Ability Cooldown(Attacker, Button(Ability 1)) == 0;
		Has Status(Attacker, Hacked) == False;
		Has Status(Attacker, Asleep) == False;
		Has Status(Attacker, Stunned) == False;
		Has Status(Attacker, Knocked Down) == False;
		Has Status(Attacker, Frozen) == False;
	}

	actions
	{
		Skip If(Event Ability != Button(Primary Fire), 1);
		Wait(0.100, Ignore Condition);
		Set Status(Victim, Null, Asleep, Workshop Setting Real(Custom String("Ana"), Custom String("Sleep Duration"), 5, 0, 20, 0));
		Wait(0.050, Ignore Condition);
		Set Ability Cooldown(Attacker, Button(Ability 1), Workshop Setting Real(Custom String("Ana"), Custom String("Sleep Cooldown"), 8,
			0, 40, 0));
	}
}

rule("AnaUseDartsToHeal")
{
	event
	{
		Ongoing - Each Player;
		All;
		Ana;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Ammo(Event Player, 0) != 0;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Stunned) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Frozen) == False;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Health(Event Player) < Max Health(Event Player);
	}

	actions
	{
		Heal(Event Player, Event Player, Min(Ammo(Event Player, 0), Global.LobbyAnaMaxDartUsed) * Workshop Setting Integer(Custom String(
			"Ana"), Custom String("Heal Per Dart"), 10, 0, 100, 0));
		Set Ammo(Event Player, 0, Ammo(Event Player, 0) - Global.LobbyAnaMaxDartUsed);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Yellow), Event Player, 1);
		Wait(1, Ignore Condition);
	}
}

disabled rule("Zarya")
{
	event
	{
		Ongoing - Global;
	}
}

rule("ZaryaIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Zarya));
		Disallow Button(Event Player, Button(Ability 2));
		Create Effect(Event Player.ZaryaReflectDuration > 0 ? All Players(All Teams) : Null, Good Aura, Color(Rose), Position Of(
			Event Player) + Vector(0, 0.700, 0), 1.200, Visible To Position Radius and Color);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Event Player.ZaryaColorSway = 90;
	}
}

rule("ZaryaUsesAbility2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Dummy Bot(Event Player) == False;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Event Player.ZaryaReflectDuration == 0;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Stunned) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Frozen) == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Ability 2), Workshop Setting Real(Custom String("Zarya"), Custom String(
			"Reflective Bubble Cooldown"), 12, 0, 40, 0));
		Event Player.ZaryaReflectDuration = Workshop Setting Integer(Custom String("Zarya"), Custom String("Reflective Bubble Duration"),
			5, 0, 20, 0);
		Event Player.ZaryaStartingHealth = Health(Event Player);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Rose), Position Of(Event Player), 3);
		Abort If(Event Player.CurrentHero == Hero(Sombra));
		Set Status(Event Player, Null, Unkillable, Event Player.ZaryaReflectDuration);
	}
}

rule("ZaryaReflectCountdown")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zarya;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.ZaryaReflectDuration > 0;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Event Player.ZaryaReflectDuration -= 1;
		Loop If Condition Is True;
		Play Effect(All Players(All Teams), Ring Explosion, Color(Rose), Position Of(Event Player), 10);
	}
}

rule("ZaryaReflectDamage")
{
	event
	{
		Player Took Damage;
		All;
		Zarya;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.ZaryaReflectDuration > 0;
		Attacker != Event Player;
	}

	actions
	{
		Set Player Health(Event Player, Event Player.ZaryaStartingHealth);
		Event Player.UltimateChargeValue += Workshop Setting Real(Custom String("Zarya"), Custom String("Reflect Ultimate Charge Prize"),
			0, 0.100, 100, 0);
		Abort If(Hero Of(Attacker) == Hero(Zarya));
		Damage(Attacker, Event Player, Event Damage);
	}
}

rule("ZaryaHealsReflect")
{
	event
	{
		Player Received Healing;
		All;
		Zarya;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.ZaryaReflectDuration > 0;
	}

	actions
	{
		Event Player.ZaryaStartingHealth = Health(Event Player);
	}
}

disabled rule("Reaper")
{
	event
	{
		Ongoing - Global;
	}
}

rule("ReaperIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Reaper));
		Create HUD Text(Event Player, Custom String("Souls Reaped: {0}", Event Player.ReaperSoulsCollected), Null, Null, Right, 20,
			Has Status(Event Player, Hacked) ? Color(Purple) : (Event Player.ReaperSoulsCollected < 13 ? Custom Color(140, 20, 20, 255)
			: Color(Red)), Color(White), Color(White), String and Color, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Event Player.ReaperSoulsCollected = 0;
		Event Player.ReaperSoulList = Empty Array;
		While(Count Of(Event Player.ReaperSoulList) < 11);
			Modify Player Variable(Event Player, ReaperSoulList, Append To Array, String(""));
			Global.TEMPReaperPrepare += 1;
		End;
		Create HUD Text(Event Player.ReaperSoulsCollected < 13 ? Event Player : Null, Null, Null, Custom String("{0}  {1}  {2}",
			Custom String("{0}  {1}", Hero Icon String(Event Player.ReaperSoulList[3]), Hero Icon String(Event Player.ReaperSoulList[2])),
			Hero Icon String(Event Player.ReaperSoulList[1]), Hero Icon String(Event Player.ReaperSoulList[0])), Right, 19, Null, Color(
			White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create HUD Text(Event Player.ReaperSoulsCollected < 13 ? Event Player : Null, Null, Null, Custom String("{0}  {1}  {2}",
			Custom String("{0}  {1}", Hero Icon String(Event Player.ReaperSoulList[7]), Hero Icon String(Event Player.ReaperSoulList[6])),
			Hero Icon String(Event Player.ReaperSoulList[5]), Hero Icon String(Event Player.ReaperSoulList[4])), Right, 18, Null, Color(
			White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create HUD Text(Event Player.ReaperSoulsCollected < 13 ? Event Player : Null, Null, Null, Custom String("{0}  {1}  {2}",
			Custom String("{0}  {1}", Hero Icon String(Event Player.ReaperSoulList[11]), Hero Icon String(
			Event Player.ReaperSoulList[10])), Hero Icon String(Event Player.ReaperSoulList[9]), Hero Icon String(
			Event Player.ReaperSoulList[8])), Right, 17, Null, Color(White), Color(White), Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create Effect(Is Using Ultimate(Event Player) && !Has Status(Event Player, Hacked)
			&& Event Player.ReaperSoulsCollected >= 13 ? All Players(All Teams) : Null, Cloud, Color(Blue), Position Of(Event Player), 8,
			Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Create Effect(Is Using Ability 1(Event Player) && !Has Status(Event Player, Hacked)
			&& Event Player.ReaperSoulsCollected >= 6 ? All Players(All Teams) : Null, Bad Aura, Color(Black), Position Of(Event Player)
			+ Vector(0, 1, 0), 3, Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Create Effect(Is Using Ability 2(Event Player) && !Has Status(Event Player, Hacked)
			&& Event Player.ReaperSoulsCollected >= 1 ? All Players(All Teams) : Null, Good Aura, Color(Red), Position Of(Event Player)
			+ Vector(0, 1, 0), 1, Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Create HUD Text(Event Player, Custom String("1 Soul: Guard Teleport", Event Player.ReaperSoulsCollected), Null, Null, Right, 21,
			Has Status(Event Player, Hacked) ? Color(Purple) : (Event Player.ReaperSoulsCollected < 13 ? (
			Event Player.ReaperSoulsCollected >= 1 ? Custom Color(140, 20, 20, 255) : Color(Gray)) : Color(Red)), Color(White), Color(
			White), String and Color, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Custom String("3 Souls: See though walls", Event Player.ReaperSoulsCollected), Null, Null, Right, 22,
			Has Status(Event Player, Hacked) ? Color(Purple) : (Event Player.ReaperSoulsCollected < 13 ? (
			Event Player.ReaperSoulsCollected >= 3 ? Custom Color(140, 20, 20, 255) : Color(Gray)) : Color(Red)), Color(White), Color(
			White), String and Color, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Custom String("6 Souls: Ghost Wraith", Event Player.ReaperSoulsCollected), Null, Null, Right, 23,
			Has Status(Event Player, Hacked) ? Color(Purple) : (Event Player.ReaperSoulsCollected < 13 ? (
			Event Player.ReaperSoulsCollected >= 6 ? Custom Color(140, 20, 20, 255) : Color(Gray)) : Color(Red)), Color(White), Color(
			White), String and Color, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Custom String("8 Souls: Backstab Bonus", Event Player.ReaperSoulsCollected), Null, Null, Right, 24,
			Has Status(Event Player, Hacked) ? Color(Purple) : (Event Player.ReaperSoulsCollected < 13 ? (
			Event Player.ReaperSoulsCollected >= 8 ? Custom Color(140, 20, 20, 255) : Color(Gray)) : Color(Red)), Color(White), Color(
			White), String and Color, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create HUD Text(Event Player, Custom String("13 Souls: Frostbite Blossom", Event Player.ReaperSoulsCollected), Null, Null, Right,
			25, Has Status(Event Player, Hacked) ? Color(Purple) : (Event Player.ReaperSoulsCollected < 13 ? Color(Gray) : Color(Red)),
			Color(White), Color(White), String and Color, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
	}
}

rule("ReaperSnapBack")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Distance Between(Position Of(Event Player), Nearest Walkable Position(Position Of(Event Player))) > 5;
		Is Using Ability 1(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Event Player.ReaperSoulsCollected >= 6;
	}

	actions
	{
		Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player)));
	}
}

rule("ReaperUseWraith")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Using Ability 1(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Event Player.ReaperSoulsCollected >= 6;
	}

	actions
	{
		Disable Movement Collision With Environment(Event Player, False);
		Set Gravity(Event Player, 25);
		Set Jump Vertical Speed(Event Player, 25);
		Wait Until(Is Using Ability 1(Event Player) == False, 5);
		Abort If(Hero Of(Event Player) != Hero(Reaper));
		Enable Movement Collision With Environment(Event Player);
		Set Gravity(Event Player, 100);
		Call Subroutine(JumpVerticalUpdate);
		Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player)));
	}
}

rule("ReaperKillsHero")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Reaper;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.ReaperSoulsCollected < 13;
		Array Contains(Event Player.ReaperSoulList, Hero Of(Victim)) == False;
	}

	actions
	{
		Event Player.ReaperSoulList[Event Player.ReaperSoulsCollected] = Hero Of(Victim);
		Event Player.ReaperSoulsCollected += 1;
	}
}

rule("ReaperFreezeUlt")
{
	event
	{
		Player Dealt Damage;
		All;
		Reaper;
	}

	conditions
	{
		Is Using Ultimate(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Event Player.ReaperSoulsCollected >= 13;
	}

	actions
	{
		Set Status(Victim, Null, Frozen, 1);
	}
}

rule("ReaperInvisTeleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		Reaper;
	}

	conditions
	{
		Is Using Ability 2(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Event Player.ReaperSoulsCollected >= 1;
	}

	actions
	{
		Set Status(Event Player, Null, Phased Out, 5);
		Set Status(Event Player, Null, Invincible, 5);
		Wait Until(!Is Using Ability 2(Event Player), 5);
		Abort If(Hero Of(Event Player) != Hero(Reaper));
		Clear Status(Event Player, Phased Out);
		Clear Status(Event Player, Invincible);
	}
}

rule("ReaperSeeThoughIconSpawner")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		(Hero Of(Event Player) == Hero(Hanzo) && Hero Of(Event Player.CustomBotOwner) == Hero(Genji)) == False;
	}

	actions
	{
		Create In-World Text(Filtered Array(Players On Hero(Hero(Reaper), All Teams), Current Array Element != Event Player && Is Alive(
			Event Player) && Current Array Element.ReaperSoulsCollected >= 3), Custom String("{0}", Hero Icon String(Hero Of(
			Event Player))), Eye Position(Event Player) + Vector(0, 0.600, 0), 2, Do Not Clip, Visible To Position and String, Color(
			White), Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
	}
}

rule("ReaperBackstab")
{
	event
	{
		Player Dealt Damage;
		All;
		Reaper;
	}

	conditions
	{
		Is In View Angle(Victim, Position Of(Event Player), 140) == False;
		Event Ability == Button(Primary Fire);
		Is Dummy Bot(Event Player) == False;
		Distance Between(Position Of(Event Player), Position Of(Victim)) <= 6;
		Event Player.ReaperSoulsCollected >= 8;
	}

	actions
	{
		Play Effect(Event Player, Bad Pickup Effect, Color(Red), Position Of(Victim), 1);
		If(Event Was Critical Hit);
			Damage(Victim, Event Player, Workshop Setting Integer(Custom String("Reaper"), Custom String("Backstab Bonus Damage Critical"), 90,
				0, 200, 0));
		Else;
			Damage(Victim, Event Player, Workshop Setting Integer(Custom String("Reaper"), Custom String("Backstab Bonus Damage Normal"), 30,
				0, 200, 0));
		End;
	}
}

disabled rule("Dva")
{
	event
	{
		Ongoing - Global;
	}
}

rule("BabyDvaEnableUlt")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, True);
		Add Health Pool To Player(Event Player, Health, 100, True, True);
	}
}

rule("MechDvaDisableUlt")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == False;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, False);
		Remove All Health Pools From Player(Event Player);
	}
}

rule("MechExplodeOnDeath")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Health(Event Player) <= 1;
		disabled Is Alive(Event Player) == False;
		Is In Alternate Form(Event Player) == False;
		disabled Is In Alternate Form(Event Player) == True;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Set Ultimate Ability Enabled(Event Player, True);
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(0.100, Ignore Condition);
		Set Ultimate Ability Enabled(Event Player, False);
		Wait Until(!Is Using Ultimate(Event Player), 6);
		Abort If(Hero Of(Event Player) != Hero(D.Va));
		Set Ultimate Ability Enabled(Event Player, True);
	}
}

rule("DvaNaturalUltGain")
{
	event
	{
		Ongoing - Each Player;
		All;
		D.Va;
	}

	conditions
	{
		Is In Alternate Form(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Wait(Workshop Setting Real(Custom String("Dva"), Custom String("Natural Ult Regen Delay"), 0.600, 0.100, 2, 0), Ignore Condition);
		Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 2);
		Loop If Condition Is True;
	}
}

disabled rule("Tracer")
{
	event
	{
		Ongoing - Global;
	}
}

rule("TracerIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Tracer));
		Create HUD Text(Event Player, Custom String("Pulse Bombs: {0}", Event Player.TracerBombStack), Null, Null, Right, 0, Color(
			Turquoise), Color(White), Color(White), String and Color, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Disallow Button(Event Player, Button(Ultimate));
		Event Player.TracerBombStack = 0;
	}
}

rule("TracerUltGainBoost")
{
	event
	{
		Player Dealt Damage;
		All;
		Tracer;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Ability != Button(Ultimate);
	}

	actions
	{
		Event Player.UltimateChargeValue += Workshop Setting Real(Custom String("Tracer"), Custom String("Ult Charge per damage tick"), 4,
			0, 100, 0);
		Abort If(!Event Was Critical Hit);
		Event Player.UltimateChargeValue += Workshop Setting Real(Custom String("Tracer"), Custom String("Ult Charge per critical tick"),
			4, 0, 100, 0);
	}
}

rule("TracerUltStackBomb")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Ultimate Charge Percent(Event Player) == 100;
		Event Player.TracerBombStack < Workshop Setting Integer(Custom String("Tracer"), Custom String("Max Pulse bombs"), 69, 1, 100, 0);
	}

	actions
	{
		Event Player.TracerBombStack += 1;
		Set Ultimate Charge(Event Player, 1);
	}
}

rule("TracerUseBomb")
{
	event
	{
		Ongoing - Each Player;
		All;
		Tracer;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.TracerBombStack > 0;
	}

	actions
	{
		Event Player.TracerUltChargeSave = Ultimate Charge Percent(Event Player);
		Set Ultimate Charge(Event Player, 100);
		Allow Button(Event Player, Button(Ultimate));
		Press Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Ultimate));
		Event Player.TracerBombStack -= 1;
		Set Ultimate Charge(Event Player, Event Player.TracerUltChargeSave);
		Wait(0.400, Ignore Condition);
		disabled Loop If Condition Is True;
	}
}

rule("TracerMoiraSuck")
{
	event
	{
		Player Took Damage;
		All;
		Tracer;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Moira);
		Is Dummy Bot(Event Player) == False;
		Ultimate Charge Percent(Event Player) == 0;
		Event Player.TracerBombStack > 0;
	}

	actions
	{
		Event Player.TracerBombStack -= 1;
		Set Ultimate Charge(Event Player, 99);
	}
}

disabled rule("Winston")
{
	event
	{
		Ongoing - Global;
	}
}

rule("WinstonIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Winston));
		Create HUD Text(!Has Status(Event Player, Hacked) && (Health(Event Player) < Max Health(Event Player)
			|| Event Player.WinstonBatteryPower < 100) && Is Crouching(Event Player) && Is Standing(Event Player) ? Event Player : Null,
			Custom String("{0}You start feeling drowsy{0}", Ability Icon String(Hero(Ana), Button(Ability 1))), Null, Null, Top, 5, Color(
			White), Color(White), Color(White), Visible To, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create Progress Bar HUD Text(Event Player, Event Player.WinstonBatteryPower, Custom String("Battery"), Right, 0,
			Event Player.WinstonBatteryPower <= 30 ? (Event Player.WinstonBatteryPower <= 20 ? (
			Event Player.WinstonBatteryPower <= 10 ? Color(Red) : Color(Orange)) : Color(Yellow)) : (
			Event Player.WinstonBatteryPower >= 95 ? Color(Green) : Color(Sky Blue)), Color(White), Values and Color, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Event Player.WinstonBatteryPower = 100;
		Disallow Button(Event Player, Button(Ability 2));
	}
}

rule("WinstonSleepToHeal")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Standing(Event Player) == True;
		Is Crouching(Event Player) == True;
		(Health(Event Player) < Max Health(Event Player) || Event Player.WinstonBatteryPower < 100) == True;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Stunned) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Frozen) == False;
	}

	actions
	{
		Wait(Random Real(Workshop Setting Real(Custom String("Winston"), Custom String("sleep delay min"), 3, 0, 60, 0),
			Workshop Setting Real(Custom String("Winston"), Custom String("sleep delay max"), 6, 0, 60, 0)), Abort When False);
		Set Status(Event Player, Null, Asleep, 20);
	}
}

rule("WinstonPrimaryDrain")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Firing Primary(Event Player) == True;
		Is Dummy Bot(Event Player) == False;
		Event Player.WinstonBatteryPower > 0;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Event Player.WinstonBatteryPower -= 1;
		Wait(Workshop Setting Real(Custom String("Winston"), Custom String("Battery Primary Drain Delay"), 0.100, 0, 5, 0),
			Abort When False);
		Loop If Condition Is True;
	}
}

rule("WinstonPrimaryStun")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Winston);
		Has Status(Attacker, Hacked) == False;
		Attacker.WinstonBatteryPower > 95;
		Is Dummy Bot(Attacker) == False;
		Event Ability == Button(Primary Fire);
		Is Using Ultimate(Attacker) == False;
	}

	actions
	{
		Set Status(Event Player, Attacker, Stunned, 0.300);
		Wait(0.150, Ignore Condition);
	}
}

rule("WinstonPowerDisable")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Game In Progress == True;
		Event Player.WinstonBatteryPower <= 0;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Wait Until(Event Player.WinstonBatteryPower > 0, 99999);
		Abort If(Hero Of(Event Player) != Hero(Winston));
		Set Primary Fire Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
	}
}

rule("WinstonPlaceShield")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ability 2)) == True;
		Is Dummy Bot(Event Player) == False;
		Is Game In Progress == True;
		Ability Cooldown(Event Player, Button(Ability 2)) == 0;
		Event Player.WinstonBatteryPower >= Global.LobbyWinstonBarrierDrain;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Stunned) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Frozen) == False;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Set Max Health(Event Player, Workshop Setting Integer(Custom String("Winston"), Custom String("Barrier Health"), 1000, 100, 1000,
			0));
		Allow Button(Event Player, Button(Ability 2));
		Press Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ability 2));
		Wait(0.100, Ignore Condition);
		Call Subroutine(MaxHealthUpdate);
		Event Player.WinstonBatteryPower -= Min(Global.LobbyWinstonBarrierDrain, Event Player.WinstonBatteryPower);
	}
}

rule("WinstonSleepHeals")
{
	event
	{
		Ongoing - Each Player;
		All;
		Winston;
	}

	conditions
	{
		disabled (Health(Event Player) < Max Health(Event Player) || Event Player.WinstonBatteryPower < 100) == True;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Asleep) == True;
	}

	actions
	{
		Wait(Workshop Setting Real(Custom String("Winston"), Custom String("sleep heal interval"), 0.250, 0.100, 1, 0), Ignore Condition);
		If(!Has Status(Event Player, Hacked));
			Heal(Event Player, Event Player, Random Real(Workshop Setting Real(Custom String("Winston"), Custom String("sleep min heal"), 10,
				0, 100, 0), Workshop Setting Real(Custom String("Winston"), Custom String("sleep heal max"), 20, 0, 100, 0)));
			Set Ultimate Charge(Event Player, Ultimate Charge Percent(Event Player) + 1);
			Event Player.WinstonBatteryPower = Min(Event Player.WinstonBatteryPower + Workshop Setting Integer(Custom String("Winston"),
				Custom String("sleep energy recharge"), 3, 1, 20, 0), 100);
			If(Health(Event Player) >= Max Health(Event Player) && Event Player.WinstonBatteryPower >= 100);
				Clear Status(Event Player, Asleep);
			End;
		End;
		Loop If Condition Is True;
	}
}

disabled rule("Genji")
{
	event
	{
		Ongoing - Global;
	}
}

rule("GenjiDragonUlt")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Has Status(Event Player, Hacked) == False;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Using Ultimate(Event Player) == True;
		Ultimate Charge Percent(Event Player) >= 100;
		Is Game In Progress == True;
		Is Using Ultimate(Event Player.CustomBotDummyBot) == False;
		Event Player.GenjiUsedUlt == False;
	}

	actions
	{
		Event Player.GenjiUsedUlt = True;
		Set Ultimate Charge(Event Player.CustomBotDummyBot, 100);
		If(Is Using Ability 2(Event Player));
			Press Button(Event Player, Button(Ability 2));
			Wait Until(!Is Using Ability 2(Event Player), 3);
		End;
		Press Button(Event Player.CustomBotDummyBot, Button(Ultimate));
		Wait Until(!Is Using Ultimate(Event Player.CustomBotDummyBot), 9999);
		Set Status(Event Player, Null, Phased Out, 0.500);
		Event Player.GenjiCooldownSave = Ability Cooldown(Event Player, Button(Ability 2));
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Press Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ability 2));
		Wait(0.500, Ignore Condition);
		Allow Button(Event Player, Button(Ability 2));
		Press Button(Event Player, Button(Ability 2));
		Wait(0.200, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), Event Player.GenjiCooldownSave);
		Set Ultimate Charge(Event Player, 0);
		Event Player.GenjiUsedUlt = False;
	}
}

rule("GenjiScatterArrow")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Has Status(Event Player, Hacked) == False;
		Is Using Ability 2(Event Player) == True;
		Is Game In Progress == True;
		Event Player.GenjiUsedUlt == False;
	}

	actions
	{
		Press Button(Event Player.CustomBotDummyBot, Button(Secondary Fire));
		Set Ability Cooldown(Event Player.CustomBotDummyBot, Button(Ability 2), 0);
		Press Button(Event Player.CustomBotDummyBot, Button(Ability 2));
		Start Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
		Wait Until(!Is Using Ability 2(Event Player), 4);
		disabled Press Button(Event Player.CustomBotDummyBot, Button(Ability 2));
		Stop Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
		Set Status(Event Player, Null, Phased Out, 0.100);
	}
}

rule("GenjiSonarArrow")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Has Status(Event Player, Hacked) == False;
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Game In Progress == True;
		Event Player.GenjiUsedUlt == False;
		Ability Cooldown(Event Player.CustomBotDummyBot, Button(Ability 1)) == 0;
		Is Using Ability 2(Event Player) == False;
	}

	actions
	{
		Event Player.GenjiUsedUlt = True;
		If(Is Using Ability 2(Event Player.CustomBotDummyBot));
			Press Button(Event Player.CustomBotDummyBot, Button(Ability 2));
			Wait Until(!Is Using Ability 2(Event Player.CustomBotDummyBot), 3);
		End;
		Start Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
		Press Button(Event Player.CustomBotDummyBot, Button(Ability 1));
		Wait(0.400, Ignore Condition);
		Set Status(Event Player, Null, Phased Out, 0.100);
		Stop Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
		Event Player.GenjiCooldownSave = Ability Cooldown(Event Player, Button(Ability 2));
		Set Ability Cooldown(Event Player, Button(Ability 2), 0);
		Press Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Ability 2));
		Wait(0.500, Ignore Condition);
		Allow Button(Event Player, Button(Ability 2));
		Press Button(Event Player, Button(Ability 2));
		Wait(0.200, Ignore Condition);
		Set Ability Cooldown(Event Player, Button(Ability 2), Event Player.GenjiCooldownSave);
		Event Player.GenjiUsedUlt = False;
	}
}

rule("GenjiIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Genji));
		Create HUD Text(Event Player, Custom String("{0}", Ability Cooldown(Event Player.CustomBotDummyBot, Button(Ability 1))
			== 0 ? Custom String("Sonar Available") : Custom String("Unavailable")), Custom String("[Interact]"), Null, Right, 0,
			Has Status(Event Player, Hacked) ? Color(Purple) : (Ability Cooldown(Event Player.CustomBotDummyBot, Button(Ability 1))
			== 0 ? Color(Lime Green) : Color(Red)), Color(White), Color(White), String and Color, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Press Button(Event Player, Button(Ultimate));
		Event Player.GenjiUsedUlt = False;
		Event Player.CustomBotHero = Hero(Hanzo);
		Event Player.CustomBotAutoAimEnabled = False;
		Event Player.CustomBotTurnRate = 0;
		Event Player.CustomBotMaxAmmo = 0;
		Event Player.CustomBotDetectionRange = 0;
		Event Player.CustomBotInaccuracy = 0;
		disabled Disallow Button(Event Player, Button(Ultimate));
		Event Player.CustomBotMaximumHealth = 100;
		Event Player.CustomBotDamageDealt = 100;
		Event Player.CustomBotDamageTaken = 100;
		Call Subroutine(CreateCustomBot);
		Set Status(Event Player.CustomBotDummyBot, Null, Invincible, 9999);
		Set Status(Event Player.CustomBotDummyBot, Null, Phased Out, 9999);
		Set Invisible(Event Player.CustomBotDummyBot, All);
		Attach Players(Event Player.CustomBotDummyBot, Event Player, Vector(0, 0, 1.500));
		Start Facing(Event Player.CustomBotDummyBot, Vector Towards(Position Of(Event Player.CustomBotDummyBot), Position Of(
			Event Player)), 500, To World, Direction and Turn Rate);
		Disable Movement Collision With Environment(Event Player.CustomBotDummyBot, True);
		Start Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
		Set Primary Fire Enabled(Event Player.CustomBotDummyBot, False);
		disabled Add Health Pool To Player(Event Player, Shields, 98, True, False);
		disabled Event Player.MaxHealthArray[Slot Of(Event Player) * 10 + 1] = -99.999;
		disabled Call Subroutine(MaxHealthUpdate);
		disabled Add Health Pool To Player(Event Player, Armor, 150, True, False);
		disabled Event Player.GenjiHealthID = Last Created Health Pool;
	}
}

disabled rule("GenjiPermaDamage")
{
	event
	{
		Ongoing - Each Player;
		All;
		Genji;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Health Of Type(Event Player, Shields) == 0;
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Health Of Type(Event Player, Armor) < Max Health Of Type(Event Player, Armor);
	}

	actions
	{
		Add Health Pool To Player(Event Player, Armor, Health Of Type(Event Player, Armor), True, False);
		Remove Health Pool From Player(Event Player.GenjiHealthID);
		Event Player.GenjiHealthID = Last Created Health Pool;
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
	}
}

disabled rule("Symetra")
{
	event
	{
		Ongoing - Global;
	}
}

rule("SymetraIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Symmetra));
		Event Player.SymetraLaserTicks = Empty Array;
		Modify Player Variable(Event Player, SymetraLaserTicks, Append To Array, 0);
		Modify Player Variable(Event Player, SymetraLaserTicks, Append To Array, 0);
		Modify Player Variable(Event Player, SymetraLaserTicks, Append To Array, 0);
		disabled Modify Player Variable(Event Player, SymetraLaserTicks, Append To Array, 0);
		Set Ability Charge(Event Player, Button(Ability 1), 3);
		Disallow Button(Event Player, Button(Ability 1));
		Event Player.SymetraLocationArray = Empty Array;
		Modify Player Variable(Event Player, SymetraLocationArray, Append To Array, False);
		Modify Player Variable(Event Player, SymetraLocationArray, Append To Array, False);
		Modify Player Variable(Event Player, SymetraLocationArray, Append To Array, False);
		disabled Modify Player Variable(Event Player, SymetraLocationArray, Append To Array, False);
		Event Player.SymetraIndexer = False;
		Create Effect(Ability Charge(Event Player, Button(Ability 1)) > 0 && Is Button Held(Event Player, Button(Ability 1))
			? Event Player : Null, Light Shaft, Color(Red), Event Player.SymetraAimingDirection, Global.LobbySymetraLaserRadius,
			Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Event Player.SymetraFiringLaser = False;
		"create laser effect instances"
		For Player Variable(Event Player, SymetraIndexer, 0, Count Of(Event Player.SymetraLocationArray), 1);
			Create Effect(Event Player.SymetraLocationArray[Evaluate Once(Event Player.SymetraIndexer)] != False ? All Players(All Teams)
				: Null, Light Shaft, Event Player.SymetraLaserTicks[Evaluate Once(Event Player.SymetraIndexer)] > 0 ? Color(Red) : Color(
				Sky Blue), Event Player.SymetraLocationArray[Evaluate Once(Event Player.SymetraIndexer)], 0.100,
				Visible To Position Radius and Color);
			Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
			Create Effect(Event Player.SymetraLocationArray[Evaluate Once(Event Player.SymetraIndexer)] != False ? All Players(All Teams)
				: Null, Ring, Event Player.SymetraLaserTicks[Evaluate Once(Event Player.SymetraIndexer)] > 0 ? Color(Red) : Color(Sky Blue),
				Event Player.SymetraLocationArray[Evaluate Once(Event Player.SymetraIndexer)], Global.LobbySymetraLaserRadius,
				Visible To Position Radius and Color);
			Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
			Create Effect(Event Player.SymetraLaserTicks[Evaluate Once(Event Player.SymetraIndexer)] > 0 ? All Players(All Teams) : Null,
				Light Shaft, Color(Red), Event Player.SymetraLocationArray[Evaluate Once(Event Player.SymetraIndexer)], 0.500,
				Visible To Position and Radius);
			Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
			Create Effect(Event Player.SymetraLaserTicks[Evaluate Once(Event Player.SymetraIndexer)] > 0 ? All Players(All Teams) : Null,
				Light Shaft, Color(Red), Event Player.SymetraLocationArray[Evaluate Once(Event Player.SymetraIndexer)], 0.800,
				Visible To Position and Radius);
			Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		End;
		Wait(0.070, Abort When False);
		Create Effect(Ultimate Charge Percent(Event Player) == 100 && Is Button Held(Event Player, Button(Ultimate)) ? Event Player : Null,
			Orb, Color(Red), Event Player.SymetraAimingDirection + Vector(0, 2, 0), 10, Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Event Player.SymetraUltimateLocation = False;
		Create Effect(Event Player.SymetraUltimateLocation != False ? All Players(All Teams) : Null, Orb, Color(Sky Blue),
			Event Player.SymetraUltimateLocation + Vector(0, 2, 0), 10, Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Create HUD Text(Ultimate Charge Percent(Event Player) == 100 && Is Button Held(Event Player, Button(Ultimate))
			? Event Player : Null, Null, Custom String("press [primary] to place"), Null, Top, 5, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create Effect(Event Player.SymetraUltimateLocation != False ? All Players(All Teams) : Null, Sphere, Color(White),
			Event Player.SymetraUltimateLocation + Vector(0, 2, 0), Event Player.SymetraOrbSize, Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Event Player.SymetraOrbSize = 0.100;
		Event Player.SymetraTargetList = Empty Array;
		Disallow Button(Event Player, Button(Ultimate));
		Event Player.SymetraUltimateLocation = False;
	}
}

rule("SymetraCalculateAim")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		(Is Button Held(Event Player, Button(Ability 1)) || Is Button Held(Event Player, Button(Ultimate))) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		disabled Event Player.SymetraAimingDirection[0] = Nearest Walkable Position(Ray Cast Hit Position(Eye Position(Event Player), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * Global.LobbySymetraCastRange, All Players(All Teams), Event Player,
			False));
		disabled Event Player.SymetraAimingDirection = Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player)
			+ Facing Direction Of(Event Player) * Global.LobbySymetraCastRange, All Players(All Teams), Event Player, False);
		Event Player.SymetraAimingDirection = Ray Cast Hit Position(Eye Position(Event Player) + Vector(0, 1.500, 0), Eye Position(
			Event Player) + Facing Direction Of(Event Player) * Global.LobbySymetraCastRange, All Players(All Teams), Event Player, False);
		Event Player.SymetraAimingDirection = Ray Cast Hit Position(Event Player.SymetraAimingDirection,
			Event Player.SymetraAimingDirection + Vector(0, -25, 0), All Players(All Teams), Event Player, True);
		Wait(0.150, Abort When False);
		Loop If Condition Is True;
	}
}

rule("SymetraLaserStrike1")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
		Event Player.SymetraLocationArray[0] == False;
		Event Player.SymetraFiringLaser == False;
		Ability Charge(Event Player, Button(Ability 1)) > 0;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Event Player.SymetraFiringLaser = True;
		Wait Until(!Is Button Held(Event Player, Button(Ability 1)), 60);
		Abort If(Hero Of(Event Player) != Hero(Symmetra));
		Set Ability Charge(Event Player, Button(Ability 1), Ability Charge(Event Player, Button(Ability 1)) - 1);
		Event Player.SymetraFiringLaser = False;
		Event Player.SymetraLocationArray[0] = Event Player.SymetraAimingDirection;
		Wait(Global.LobbySymetraLaserDelay, Ignore Condition);
		Event Player.SymetraLaserTicks[0] = Global.LobbySymetraLaserTicks;
		While(Event Player.SymetraLaserTicks[0] > 0);
			Abort If(!Is Alive(Event Player));
			Wait(Global.LobbySymetraLaserDelayPerTick, Ignore Condition);
			Damage(Filtered Array(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Distance Between(Vector(
				X Component Of(Position Of(Current Array Element)), 0, Z Component Of(Position Of(Current Array Element))), Vector(
				X Component Of(Event Player.SymetraLocationArray[0]), 0, Z Component Of(Event Player.SymetraLocationArray[0])))
				< Global.LobbySymetraLaserRadius), Event Player, Global.LobbySymetraLaserDamagePerTick);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player.SymetraLocationArray[0], 6);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.SymetraLocationArray[0], 14);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red), Event Player.SymetraLocationArray[0], 200);
			Event Player.SymetraLaserTicks[0] -= 1;
			Global.TEMPSymetraBeam1 += 1;
		End;
		Event Player.SymetraLocationArray[0] = False;
	}
}

rule("SymetraLaserStrike2")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
		Event Player.SymetraLocationArray[1] == False;
		Event Player.SymetraFiringLaser == False;
		Event Player.SymetraLocationArray[0] != False;
		Ability Charge(Event Player, Button(Ability 1)) > 0;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Event Player.SymetraFiringLaser = True;
		Wait Until(!Is Button Held(Event Player, Button(Ability 1)), 60);
		Abort If(Hero Of(Event Player) != Hero(Symmetra));
		Set Ability Charge(Event Player, Button(Ability 1), Ability Charge(Event Player, Button(Ability 1)) - 1);
		Event Player.SymetraFiringLaser = False;
		Event Player.SymetraLocationArray[1] = Event Player.SymetraAimingDirection;
		Wait(Global.LobbySymetraLaserDelay, Ignore Condition);
		Event Player.SymetraLaserTicks[1] = Global.LobbySymetraLaserTicks;
		While(Event Player.SymetraLaserTicks[1] > 0);
			Abort If(!Is Alive(Event Player));
			Wait(Global.LobbySymetraLaserDelayPerTick, Ignore Condition);
			Damage(Filtered Array(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Distance Between(Vector(
				X Component Of(Position Of(Current Array Element)), 0, Z Component Of(Position Of(Current Array Element))), Vector(
				X Component Of(Event Player.SymetraLocationArray[1]), 0, Z Component Of(Event Player.SymetraLocationArray[1])))
				< Global.LobbySymetraLaserRadius), Event Player, Global.LobbySymetraLaserDamagePerTick);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player.SymetraLocationArray[1], 6);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.SymetraLocationArray[1], 14);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red), Event Player.SymetraLocationArray[1], 200);
			Event Player.SymetraLaserTicks[1] -= 1;
			Global.TEMPSymetraBeam2 += 1;
		End;
		Event Player.SymetraLocationArray[1] = False;
	}
}

rule("SymetraLaserStrike3")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Is Alive(Event Player) == True;
		Event Player.SymetraLocationArray[2] == False;
		Event Player.SymetraFiringLaser == False;
		Event Player.SymetraLocationArray[1] != False;
		Event Player.SymetraLocationArray[0] != False;
		Ability Charge(Event Player, Button(Ability 1)) > 0;
		Has Status(Event Player, Hacked) == False;
		Has Status(Event Player, Knocked Down) == False;
		Has Status(Event Player, Asleep) == False;
		Has Status(Event Player, Frozen) == False;
		Has Status(Event Player, Stunned) == False;
	}

	actions
	{
		Event Player.SymetraFiringLaser = True;
		Wait Until(!Is Button Held(Event Player, Button(Ability 1)), 60);
		Abort If(Hero Of(Event Player) != Hero(Symmetra));
		Set Ability Charge(Event Player, Button(Ability 1), Ability Charge(Event Player, Button(Ability 1)) - 1);
		Event Player.SymetraFiringLaser = False;
		Event Player.SymetraLocationArray[2] = Event Player.SymetraAimingDirection;
		Wait(Global.LobbySymetraLaserDelay, Ignore Condition);
		Event Player.SymetraLaserTicks[2] = Global.LobbySymetraLaserTicks;
		While(Event Player.SymetraLaserTicks[2] > 0);
			Abort If(!Is Alive(Event Player));
			Wait(Global.LobbySymetraLaserDelayPerTick, Ignore Condition);
			Damage(Filtered Array(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Distance Between(Vector(
				X Component Of(Position Of(Current Array Element)), 0, Z Component Of(Position Of(Current Array Element))), Vector(
				X Component Of(Event Player.SymetraLocationArray[2]), 0, Z Component Of(Event Player.SymetraLocationArray[2])))
				< Global.LobbySymetraLaserRadius), Event Player, Global.LobbySymetraLaserDamagePerTick);
			Play Effect(All Players(All Teams), Ring Explosion, Color(Red), Event Player.SymetraLocationArray[2], 6);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Event Player.SymetraLocationArray[2], 14);
			Play Effect(All Players(All Teams), Debuff Impact Sound, Color(Red), Event Player.SymetraLocationArray[2], 200);
			Event Player.SymetraLaserTicks[2] -= 1;
			Global.TEMPSymetraBeam3 += 1;
		End;
		Event Player.SymetraLocationArray[2] = False;
	}
}

rule("SymetraUltimatePull")
{
	event
	{
		Ongoing - Each Player;
		All;
		Symmetra;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Primary Fire)) == True;
		Event Player.SymetraTargetList == Empty Array;
		Ultimate Charge Percent(Event Player) == 100;
		Has Status(Event Player, Hacked) == False;
		Event Player.SymetraUltimateLocation == False;
	}

	actions
	{
		Abort If(Ray Cast Hit Position(Event Player.SymetraUltimateLocation, Event Player.SymetraUltimateLocation - Vector(0, 3, 0), Null,
			Event Player, True) == Distance Between(Event Player.SymetraUltimateLocation, Event Player.SymetraUltimateLocation - Vector(0,
			-3, 0)));
		Event Player.SymetraTargetList = 0;
		Set Ultimate Charge(Event Player, 0);
		Event Player.SymetraUltimateLocation = Event Player.SymetraAimingDirection;
		Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Sky Blue), Event Player.SymetraUltimateLocation + Vector(0, 2, 0), 2);
		Chase Player Variable Over Time(Event Player, SymetraOrbSize, 1.500, 3, None);
		Wait Until(Event Player.SymetraOrbSize >= 1.500, 4);
		Stop Chasing Player Variable(Event Player, SymetraOrbSize);
		Abort If(Hero Of(Event Player) != Hero(Symmetra));
		Abort If(!Is Alive(Event Player));
		Event Player.SymetraTargetList = Filtered Array(Players Within Radius(Event Player.SymetraUltimateLocation + Vector(0, 2, 0),
			Workshop Setting Integer(Custom String("Symetra"), Custom String("Teleporter Range"), 100, 0, 200, 0), All Teams, Surfaces),
			Current Array Element != Event Player);
		For Player Variable(Event Player, SymetraIndexer, 0, Count Of(Event Player.SymetraTargetList), 1);
			Abort If(!Is Alive(Event Player));
			Create Beam Effect(All Players(All Teams), Good Beam, Position Of(Evaluate Once(
				Event Player.SymetraTargetList[Event Player.SymetraIndexer])) + Vector(0, 1, 0), Event Player.SymetraUltimateLocation + Vector(
				0, 2, 0), Color(Sky Blue), Visible To Position and Radius);
			Modify Player Variable(Event Player, SymetraUltimateTrashArray, Append To Array, Last Created Entity);
			Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		End;
		Abort If(!Is Alive(Event Player));
		Create HUD Text(Event Player.SymetraTargetList, Custom String("Teleporting..."), Null, Null, Top, 10, Color(Sky Blue), Color(
			White), Color(White), None, Default Visibility);
		Modify Player Variable(Event Player, SymetraUltimateTrashArray, Append To Array, Last Text ID);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Wait(1, Ignore Condition);
		Abort If(!Is Alive(Event Player));
		Teleport(Event Player.SymetraTargetList, Event Player.SymetraUltimateLocation);
		While(Count Of(Event Player.SymetraUltimateTrashArray) > 0);
			Destroy HUD Text(Event Player.SymetraUltimateTrashArray[0]);
			Destroy Effect(Event Player.SymetraUltimateTrashArray[0]);
			Modify Player Variable(Event Player, SymetraUltimateTrashArray, Remove From Array By Index, 0);
			Global.TEMPSymetraUltClean += 1;
		End;
		Event Player.SymetraTargetList = Empty Array;
		Event Player.SymetraOrbSize = 0.100;
		Event Player.SymetraUltimateLocation = False;
	}
}

disabled rule("wreckingBall")
{
	event
	{
		Ongoing - Global;
	}
}

rule("WreckingBallIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Wrecking Ball));
		Disallow Button(Event Player, Button(Ability 1));
		disabled Set Ability 1 Enabled(Event Player, False);
		Event Player.MaxHealthArray[Slot Of(Event Player) * 10 + 1] = -99.999;
		Call Subroutine(MaxHealthUpdate);
		Event Player.WreckingBallExplosion = 0;
		Add Health Pool To Player(Event Player, Shields, 994, True, False);
		Create HUD Text(Event Player, Custom String("{0} Final Countdown: {1}", Hero Icon String(Hero(Wrecking Ball)),
			Event Player.WreckingBallCountdown), Null, Null, Top, 5, Color(Red), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Event Player.WreckingBallCountdown = Workshop Setting Integer(Custom String("Wrecking Ball"), Custom String("Countdown"), 10, 5,
			60, 0);
		Create In-World Text(Filtered Array(All Players(All Teams), Current Array Element != Event Player), Custom String("{0}",
			Event Player.WreckingBallCountdown), Position Of(Event Player) + Vector(0, 2, 0), 3, Clip Against Surfaces,
			Visible To Position and String, Color(Red), Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create Effect(Event Player, Ring, Color(Red), Position Of(Event Player), 20, Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Create Effect(All Players(All Teams), Sphere, Color(Red), Position Of(Event Player), Event Player.WreckingBallExplosion,
			Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Disallow Button(Event Player, Button(Ultimate));
		Set Status(Event Player, Null, Unkillable, 15);
		Event Player.WreckingBallArmed = True;
		Event Player.WreckingBallKiller = Event Player;
	}
}

rule("WreckingBallLeaveForm")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Using Ability 1(Event Player) == True;
		Is Button Held(Event Player, Button(Secondary Fire)) == False;
		Event Player.WreckingBallCountdown > 2;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Allow Button(Event Player, Button(Ability 1));
		Press Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 1));
		Loop If Condition Is True;
	}
}

rule("WreckingBallCountdown")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.WreckingBallCountdown > 0;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Wait(1.400, Ignore Condition);
		Event Player.WreckingBallCountdown -= 1;
		Event Player.WreckingBallCountdown = Max(Event Player.WreckingBallCountdown, 0);
		Loop If Condition Is True;
	}
}

rule("WreckingBallExplode")
{
	event
	{
		Ongoing - Each Player;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Event Player.WreckingBallCountdown == 0;
		Is Dummy Bot(Event Player) == False;
		Is Game In Progress == True;
		Event Player.WreckingBallArmed == True;
	}

	actions
	{
		Wait(0.100, Abort When False);
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		If(!Is In Alternate Form(Event Player));
			Allow Button(Event Player, Button(Ability 1));
			Press Button(Event Player, Button(Ability 1));
			Disallow Button(Event Player, Button(Ability 1));
		End;
		Disallow Button(Event Player, Button(Ability 2));
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Jump));
		Disallow Button(Event Player, Button(Primary Fire));
		Chase Player Variable Over Time(Event Player, WreckingBallExplosion, 20, 0.500, None);
		Wait(0.500, Ignore Condition);
		Stop Chasing Player Variable(Event Player, WreckingBallExplosion);
		disabled Event Player.WreckingBallUltBonus = Ultimate Charge Percent(Event Player);
		Event Player.WreckingBallUltBonus = Count Of(Filtered Array(Players Within Radius(Eye Position(Event Player),
			Global.LobbyWreckinBallRange, All Teams, Surfaces And All Barriers), Hero Of(Current Array Element) != Hero(Wrecking Ball)))
			* Workshop Setting Integer(Custom String("WreckingBall"), Custom String("Ult Gain per kill"), 15, 0, 100, 0);
		Filtered Array(Players Within Radius(Eye Position(Event Player), Global.LobbyWreckinBallRange, All Teams,
			Surfaces And All Barriers), Hero Of(Current Array Element) != Hero(Wrecking Ball)).WreckingBallVictim = Event Player;
		Set Ultimate Charge(Event Player, Event Player.WreckingBallUltBonus);
		disabled Wait(0.100, Ignore Condition);
		Skip If(Event Player.CurrentHero == Hero(Sombra), 1);
		Clear Status(Event Player, Unkillable);
		Kill(Event Player, Event Player.WreckingBallKiller);
		Allow Button(Event Player, Button(Jump));
		Event Player.WreckingBallArmed = 0;
		Stop Forcing Throttle(Event Player);
	}
}

rule("WreckingBallExplosionPlayerCheck")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.WreckingBallVictim != 0;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Position Of(Event Player.WreckingBallVictim), Position Of(Event Player) + Vector(0,
			0.600, 0)), Max(Workshop Setting Integer(Custom String("Wreckingball"), Custom String("Explosion Velocity Max"), 60, 0, 400, 0)
			- Distance Between(Position Of(Event Player), Position Of(Event Player.WreckingBallVictim)) * Workshop Setting Integer(
			Custom String("Wreckingball"), Custom String("Explosion Velocity Multiplier"), 1, 0, 100, 0), 0), To World,
			Cancel Contrary Motion);
		Wait(0.050, Ignore Condition);
		Damage(Event Player, Event Player.WreckingBallVictim, Max(Workshop Setting Integer(Custom String("Wreckingball"), Custom String(
			"Explosion Max Damage"), 2000, 100, 4000, 0) - Distance Between(Position Of(Event Player), Position Of(
			Event Player.WreckingBallVictim)) * Workshop Setting Integer(Custom String("WreckingBall"), Custom String(
			"Explosion Distance Multiplier"), 140, 0, 300, 0), 0));
		Event Player.WreckingBallVictim = 0;
	}
}

rule("WreckingBallTakesLethalDamage")
{
	event
	{
		Player Took Damage;
		All;
		Wrecking Ball;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Health Of Type(Event Player, Shields) == 0;
		Event Player.WreckingBallCountdown > 0;
		Event Player.WreckingBallKiller == Event Player;
	}

	actions
	{
		Event Player.WreckingBallCountdown = 0;
		Event Player.WreckingBallKiller = Attacker;
	}
}

disabled rule("Roadhog")
{
	event
	{
		Ongoing - Global;
	}
}

rule("RoadhogIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Roadhog));
		Set Healing Dealt(Event Player, 0);
		Event Player.MaxHealthArray[Slot Of(Event Player) * 10 + 1] = -99.999;
		Call Subroutine(MaxHealthUpdate);
		Add Health Pool To Player(Event Player, Armor, Global.LobbyRoadhogBottleMax, False, False);
		Event Player.RoadhogUltimateTarget = 0;
		Create HUD Text(Event Player, Custom String("Threshold: {0}", Round To Integer(Max Health(Event Player) / 2, Up)), Null, Null,
			Right, 0, Color(Orange), Color(White), Color(White), String, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Create Effect(Is Using Ultimate(Event Player) ? All Players(All Teams) : Null, Ring, Color(Orange), Position Of(Event Player), 2,
			Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
	}
}

rule("RoadhogUseBottle")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Using Ability 2(Event Player) == True;
	}

	actions
	{
		Wait(0.380, Ignore Condition);
		Skip If(Global.LobbyRoadhogBottleMax - Health Of Type(Event Player, Armor) == 0, 1);
		Add Health Pool To Player(Event Player, Armor, Min(Global.LobbyRoadhogBottleMax - Health Of Type(Event Player, Armor),
			Global.lobbyRoadhogBottleHeal), False, False);
		Wait(0.200, Ignore Condition);
		Skip If(Global.LobbyRoadhogBottleMax - Health Of Type(Event Player, Armor) == 0, 1);
		Add Health Pool To Player(Event Player, Armor, Min(Global.LobbyRoadhogBottleMax - Health Of Type(Event Player, Armor),
			Global.lobbyRoadhogBottleHeal), False, False);
		Wait(0.200, Ignore Condition);
		Skip If(Global.LobbyRoadhogBottleMax - Health Of Type(Event Player, Armor) == 0, 1);
		Add Health Pool To Player(Event Player, Armor, Min(Global.LobbyRoadhogBottleMax - Health Of Type(Event Player, Armor),
			Global.lobbyRoadhogBottleHeal), False, False);
		Wait(0.200, Ignore Condition);
	}
}

rule("RoadhogHook")
{
	event
	{
		Player Dealt Damage;
		All;
		Roadhog;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Ability == Button(Ability 1);
		(Hero Of(Victim) == Hero(Roadhog) && Is Using Ultimate(Victim)) == False;
	}

	actions
	{
		Set Status(Event Player, Null, Invincible, 1);
		Wait Until(!Is Using Ability 1(Event Player), 2);
		Clear Status(Event Player, Invincible);
		Abort If(Distance Between(Position Of(Event Player), Position Of(Victim)) > 4);
		If(Health(Victim) < Max Health(Event Player) / 2);
			Skip If(Global.LobbyRoadhogMaxShield - Health Of Type(Event Player, Shields) == 0, 1);
			Add Health Pool To Player(Event Player, Shields, Min(Global.LobbyRoadhogMaxShield - Health Of Type(Event Player, Shields),
				Max Health(Victim)), False, False);
			Kill(Victim, Event Player);
			Skip If(Hero Of(Victim) == Hero(D.Va) && !Is In Alternate Form(Victim), 2);
			Set Invisible(Victim, All);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Position Of(Victim) + Vector(0, 0.600, 0), 3);
			Set Ability Cooldown(Event Player, Button(Ability 1), 0);
		End;
	}
}

rule("RoadhogUltGrapple")
{
	event
	{
		Player Received Knockback;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Roadhog);
		Is Dummy Bot(Attacker) == False;
		Event Ability == Button(Ultimate);
		Max Health(Event Player) < Max Health(Attacker) / 2;
		Event Player.RoadhogUltimateTarget == 0;
		Array Contains(Attacker.RoadhogBlacklist, Event Player) == False;
		(Hero Of(Victim) == Hero(Roadhog) && Is Using Ultimate(Victim)) == False;
		Distance Between(Position Of(Event Player), Position Of(Attacker)) < 20;
		(Hero Of(Victim) == Hero(Reaper) && Is Using Ability 1(Victim)) == False;
		disabled (Hero Of(Victim) == Hero(Genji) && Is Using Ability 1(Victim)) == False;
		(Hero Of(Victim) == Hero(Tracer) && (Is Using Ability 1(Victim) || Is Using Ability 2(Victim))) == False;
		(Hero Of(Victim) == Hero(Moira) && Is Using Ability 1(Victim)) == False;
	}

	actions
	{
		Event Player.RoadhogUltimateTarget = Attacker;
		Set Knockback Received(Event Player, 0);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Position Of(Attacker) + Vector(0, 1, 0), Position Of(Event Player)
			+ Vector(0, 1, 0), Color(White), Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Modify Player Variable(Attacker, TrashArray, Append To Array, Last Created Entity);
		Modify Player Variable(Event Player, RoadhogTrashArray, Append To Array, Last Created Entity);
		Modify Player Variable(Attacker, RoadhogTrashArray, Append To Array, Last Created Entity);
		Disable Movement Collision With Environment(Event Player, True);
		Start Forcing Throttle(Event Player, 0, 0, 0, 0, 0, 0);
		Set Gravity(Event Player, 0);
	}
}

rule("RoadhogUltPull")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Event Player.RoadhogUltimateTarget != 0;
		Distance Between(Position Of(Event Player), Position Of(Event Player.RoadhogUltimateTarget)) > 2;
		Is Using Ultimate(Event Player.RoadhogUltimateTarget) == True;
		(Hero Of(Event Player) == Hero(Roadhog) && Is Using Ultimate(Event Player)) == False;
		Distance Between(Position Of(Event Player), Position Of(Event Player.RoadhogUltimateTarget)) < 20;
		(Hero Of(Event Player) == Hero(Reaper) && Is Using Ability 1(Event Player)) == False;
		disabled (Hero Of(Event Player) == Hero(Genji) && Is Using Ability 1(Event Player)) == False;
		disabled (Hero Of(Event Player) == Hero(Tracer) && (Is Using Ability 1(Event Player) || Is Using Ability 2(Event Player))) == False;
		disabled (Hero Of(Event Player) == Hero(Moira) && Is Using Ability 1(Event Player)) == False;
		disabled (Hero Of(Event Player) == Hero(McCree) && Is Using Ability 1(Event Player)) == False;
	}

	actions
	{
		Apply Impulse(Event Player, Direction Towards(Position Of(Event Player), Position Of(Event Player.RoadhogUltimateTarget)), 5,
			To World, Cancel Contrary Motion);
		Set Status(Event Player, Null, Phased Out, 0.300);
		Wait(0.100, Ignore Condition);
		Loop If Condition Is True;
		If(Max Health(Event Player) < Max Health(Event Player.RoadhogUltimateTarget) / 2 && Distance Between(Position Of(Event Player),
			Position Of(Event Player.RoadhogUltimateTarget)) < 2);
			Skip If(Global.LobbyRoadhogMaxShield - Health Of Type(Event Player.RoadhogUltimateTarget, Shields) == 0, 1);
			Add Health Pool To Player(Event Player.RoadhogUltimateTarget, Shields, Min(Global.LobbyRoadhogMaxShield - Health Of Type(
				Event Player.RoadhogUltimateTarget, Shields), Max Health(Event Player)), False, False);
			Kill(Event Player, Event Player.RoadhogUltimateTarget);
			Skip If(Hero Of(Event Player) == Hero(D.Va) && !Is In Alternate Form(Event Player), 2);
			Set Invisible(Event Player, All);
			Play Effect(All Players(All Teams), Bad Pickup Effect, Color(Red), Position Of(Event Player) + Vector(0, 0.600, 0), 3);
		End;
		Event Player.RoadhogUltimateTarget = 0;
		Modify Player Variable(Event Player.RoadhogUltimateTarget, RoadhogBlacklist, Append To Array, Event Player);
		While(Count Of(Event Player.RoadhogTrashArray) > 0);
			Destroy Effect(Event Player.RoadhogTrashArray[0]);
			Modify Player Variable(Event Player, RoadhogTrashArray, Remove From Array By Index, 0);
			Global.TEMPRoadhogCleanAll += 1;
		End;
		Stop Forcing Throttle(Event Player);
		Skip If(Hero Of(Event Player) == Hero(Reaper) && Is Using Ability 1(Event Player) && Event Player.ReaperSoulsCollected >= 6, 5);
		Set Gravity(Event Player, 100);
		Enable Movement Collision With Environment(Event Player);
		If(Is Alive(Event Player));
			Teleport(Event Player, Nearest Walkable Position(Position Of(Event Player)));
		End;
	}
}

rule("RoadUseUlt")
{
	event
	{
		Ongoing - Each Player;
		All;
		Roadhog;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = -5000;
		Call Subroutine(DamageDealtUpdate);
		Wait Until(!Is Using Ultimate(Event Player), 6);
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = 0;
		Call Subroutine(DamageDealtUpdate);
		Event Player.RoadhogBlacklist = Empty Array;
		While(Count Of(Event Player.RoadhogTrashArray) > 0);
			Destroy Effect(Event Player.RoadhogTrashArray[0]);
			Modify Player Variable(Event Player, RoadhogTrashArray, Remove From Array By Index, 0);
			Global.TEMPRoadhogCleanPrivate += 1;
		End;
		Set Ultimate Charge(Event Player, 0);
	}
}

disabled rule("Bastion")
{
	event
	{
		Ongoing - Global;
	}
}

rule("BastionIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Bastion));
		disabled Disallow Button(Event Player, Button(Ultimate));
		Event Player.CustomBotHero = Hero(Mercy);
		Event Player.CustomBotAutoAimEnabled = False;
		Event Player.CustomBotTurnRate = 0;
		Event Player.CustomBotMaxAmmo = 0;
		Event Player.CustomBotDetectionRange = 0;
		Event Player.CustomBotInaccuracy = 0;
		Event Player.CustomBotMaximumHealth = 100;
		Event Player.CustomBotDamageDealt = 100;
		Event Player.CustomBotMoveSpeed = 100;
		Event Player.CustomBotDamageTaken = 100;
		Create Beam Effect(Is Alive(Event Player.CustomBotDummyBot)
			&& Event Player.CustomBotDummyBot != 0 && !Event Player.BastionMercyFlight && !(Has Status(Event Player.CustomBotDummyBot,
			Hacked) || Has Status(Event Player.CustomBotDummyBot, Stunned) || Has Status(Event Player.CustomBotDummyBot, Asleep)
			|| Has Status(Event Player.CustomBotDummyBot, Knocked Down) || Has Status(Event Player.CustomBotDummyBot, Frozen))
			? All Players(All Teams) : Null, Good Beam, Eye Position(Event Player.CustomBotDummyBot) + Vector(0, -0.500, 0), Eye Position(
			Event Player) + Vector(0, -0.500, 0), Event Player.BastionMercyHealingModus ? Color(Yellow) : Color(Sky Blue),
			Visible To Position Radius and Color);
		disabled Create Beam Effect(Is Alive(Event Player.CustomBotDummyBot) && !Event Player.BastionMercyFlight ? All Players(All Teams) : Null,
			Good Beam, Eye Position(Event Player.CustomBotDummyBot) + Vector(0, -0.500, 0), Eye Position(Event Player) + Vector(0, -0.500,
			0), Event Player.BastionMercyHealingModus ? Color(Yellow) : Color(Sky Blue), Visible To Position Radius and Color);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Event Player.BastionMercyHealingModus = False;
		Event Player.BastionMercyFlight = False;
		Create HUD Text(Event Player.BastionMercyFlight ? Null : Event Player, Custom String("{0}", Has Status(Event Player, Hacked)
			|| Has Status(Event Player.CustomBotDummyBot, Hacked) ? Custom String("LOL GTRKT") : (
			Event Player.CustomBotDummyBot == 0 || !Is Alive(Event Player.CustomBotDummyBot) ? Custom String("{0} Mercy Respawning: {1}",
			Ability Icon String(Hero(Mercy), Button(Ability 2)), Event Player.BastionMercyCooldown) : (
			Event Player.BastionMercyCooldown == 0 ? Custom String("{0} Flight Available! {0}", Ability Icon String(Hero(Mercy), Button(
			Ultimate))) : Custom String("Unavailable: {0}", Event Player.BastionMercyCooldown)))), Custom String("[interact to fly!]"),
			Null, Right, 0, Has Status(Event Player, Hacked) || Has Status(Event Player.CustomBotDummyBot, Hacked) ? Color(Purple) : (
			Event Player.CustomBotDummyBot == 0 || !Is Alive(Event Player.CustomBotDummyBot) ? Color(Gray) : (
			Event Player.BastionMercyCooldown == 0 ? Color(Green) : Color(Red))), Color(White), Color(White), Visible To String and Color,
			Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		disabled Create Effect(Is Alive(Event Player.CustomBotDummyBot) && Event Player.CustomBotDummyBot != 0 && !Is Crouching(Event Player)
			&& !Event Player.BastionMercyFlight ? All Players(All Teams) : Null, Energy Sound, Color(White), Position Of(Event Player), 60,
			Visible To Position and Radius);
		Create Effect(Is Alive(Event Player.CustomBotDummyBot) && Event Player.CustomBotDummyBot != 0 && !Is Crouching(Event Player)
			&& !Event Player.BastionMercyFlight && !(Has Status(Event Player.CustomBotDummyBot, Hacked) || Has Status(
			Event Player.CustomBotDummyBot, Stunned) || Has Status(Event Player.CustomBotDummyBot, Asleep) || Has Status(
			Event Player.CustomBotDummyBot, Knocked Down) || Has Status(Event Player.CustomBotDummyBot, Frozen)) ? All Players(All Teams)
			: Null, Energy Sound, Color(White), Position Of(Event Player), 60, Visible To Position and Radius);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Created Entity);
		Event Player.BastionMercyCooldown = 0;
		Add Health Pool To Player(Event Player, Armor, 20, True, True);
	}
}

rule("BastionCreateMercy")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Has Status(Event Player, Hacked) == False;
		Event Player.CustomBotDummyBot == 0;
		Event Player.BastionMercyCooldown == 0;
	}

	actions
	{
		Wait(0.100, Ignore Condition);
		Call Subroutine(CreateCustomBot);
		disabled Start Facing(Event Player.CustomBotDummyBot, Facing Direction Of(Event Player), 150, To World, Direction and Turn Rate);
		Start Throttle In Direction(Event Player.CustomBotDummyBot, World Vector Of(Throttle Of(Event Player), Event Player, Rotation),
			0 + (Throttle Of(Event Player) != Vector(0, 0, 0)), To World, Replace existing throttle, Direction and Magnitude);
		Start Facing(Event Player.CustomBotDummyBot, Direction Towards(Eye Position(Event Player.CustomBotDummyBot), Eye Position(
			Event Player)), 500, To World, Direction and Turn Rate);
		Wait(0.250, Ignore Condition);
		Set Weapon(Event Player.CustomBotDummyBot, 1);
	}
}

rule("BastionMercyInstantUlt")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player.CustomBotOwner) == Hero(Bastion);
		Is Using Ultimate(Event Player) == False;
		Event Player.CustomBotOwner.BastionMercyFlight == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Wait(0.100, Abort When False);
		Loop If Condition Is True;
	}
}

rule("BastionMercyTeleport")
{
	event
	{
		Ongoing - Each Player;
		All;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player.CustomBotOwner) == Hero(Bastion);
		disabled Throttle Of(Event Player.CustomBotOwner) != Vector(0, 0, 0);
		disabled Event Player.CustomBotWalkWaypoint == Null;
		Distance Between(Position Of(Event Player), Position Of(Event Player.CustomBotOwner)) > 5;
		Is Alive(Event Player) == True;
		Is Alive(Event Player.CustomBotOwner) == True;
	}

	actions
	{
		Teleport(Event Player, Position Of(Event Player.CustomBotOwner));
	}
}

rule("BastionCountdown")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Game In Progress == True;
		Has Status(Event Player, Hacked) == False;
		Event Player.BastionMercyCooldown > 0;
	}

	actions
	{
		Wait(1, Abort When False);
		Event Player.BastionMercyCooldown -= 1;
		Loop If Condition Is True;
	}
}

rule("BastionMercyDies")
{
	event
	{
		Player Died;
		All;
		Mercy;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player.CustomBotOwner) == Hero(Bastion);
		Attacker != Victim;
	}

	actions
	{
		Event Player.CustomBotOwner.BastionMercyCooldown = Max(Event Player.BastionMercyCooldown, Workshop Setting Integer(Custom String(
			"Bastion"), Custom String("Pocket Respawn"), 20, 0, 100, 0));
	}
}

rule("BastionMercyHealTrigger")
{
	event
	{
		Player Took Damage;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Health(Event Player) <= Workshop Setting Integer(Custom String("Bastion"), Custom String("Max Health Heal Treshold"), 225, 0, 300,
			0);
		Event Player.BastionMercyHealingModus == False;
	}

	actions
	{
		Event Player.BastionMercyHealingModus = True;
	}
}

rule("BastionMercyDamageTrigger")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Health(Event Player) == Max Health(Event Player);
		Event Player.BastionMercyHealingModus == True;
	}

	actions
	{
		Event Player.BastionMercyHealingModus = False;
	}
}

rule("BastionMercyHealOnNoPrimaryTrigger")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
		Health(Event Player) < Max Health(Event Player);
		Is Firing Primary(Event Player) == False;
		Event Player.BastionMercyHealingModus == False;
	}

	actions
	{
		Wait(1.250, Abort When False);
		Event Player.BastionMercyHealingModus = True;
	}
}

rule("BastionMercyHealing")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyHealingModus == True;
		Is Alive(Event Player) == True;
		Event Player.CustomBotDummyBot != 0;
		Is Alive(Event Player.CustomBotDummyBot) == True;
		Has Status(Event Player.CustomBotDummyBot, Hacked) == False;
		Has Status(Event Player.CustomBotDummyBot, Stunned) == False;
		Has Status(Event Player.CustomBotDummyBot, Asleep) == False;
		Has Status(Event Player.CustomBotDummyBot, Knocked Down) == False;
		Has Status(Event Player.CustomBotDummyBot, Frozen) == False;
	}

	actions
	{
		Wait(0.200, Ignore Condition);
		Heal(Event Player, Null, Random Integer(Workshop Setting Integer(Custom String("Bastion"), Custom String("Mercy Minimum Healing"),
			9, 0, 30, 0), Workshop Setting Integer(Custom String("Bastion"), Custom String("Mercy Maximum Healing"), 13, 0, 30, 0)));
		Loop If Condition Is True;
	}
}

rule("BastionMercyDamageBoost")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyHealingModus == False;
		Is Alive(Event Player) == True;
		Event Player.CustomBotDummyBot != 0;
		Is Alive(Event Player.CustomBotDummyBot) == True;
		Has Status(Event Player.CustomBotDummyBot, Hacked) == False;
		Has Status(Event Player.CustomBotDummyBot, Knocked Down) == False;
		Has Status(Event Player.CustomBotDummyBot, Asleep) == False;
		Has Status(Event Player.CustomBotDummyBot, Frozen) == False;
		Has Status(Event Player.CustomBotDummyBot, Stunned) == False;
	}

	actions
	{
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = Workshop Setting Integer(Custom String("Bastion"), Custom String(
			"Mercy Damage Boost"), 30, 0, 200, 0);
		Call Subroutine(DamageDealtUpdate);
		disabled Wait Until(Event Player.BastionMercyHealingModus || !Is Alive(Event Player) || !Is Alive(Event Player.CustomBotDummyBot)
			|| Has Status(Event Player.CustomBotDummyBot, Hacked), 99999);
		Wait Until(Event Player.BastionMercyHealingModus || !Is Alive(Event Player) || !Is Alive(Event Player.CustomBotDummyBot)
			|| Has Status(Event Player.CustomBotDummyBot, Hacked) || Has Status(Event Player.CustomBotDummyBot, Stunned) || Has Status(
			Event Player.CustomBotDummyBot, Asleep) || Has Status(Event Player.CustomBotDummyBot, Knocked Down) || Has Status(
			Event Player.CustomBotDummyBot, Frozen), 99999);
		Abort If(Hero Of(Event Player) != Hero(Bastion));
		Event Player.DamageDealtArray[Slot Of(Event Player) * 10 + 1] = 0;
		Call Subroutine(DamageDealtUpdate);
	}
}

rule("BastionTurretModusCrouch")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == False;
		(Is Crouching(Event Player) || Is In Alternate Form(Event Player)) == True;
		Is Using Ultimate(Event Player) == False;
		Event Player.CustomBotDummyBot != 0;
		Is Alive(Event Player.CustomBotDummyBot) == True;
	}

	actions
	{
		Start Holding Button(Event Player.CustomBotDummyBot, Button(Crouch));
	}
}

rule("BastionTurretModusCrouchCancel")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == False;
		Is Crouching(Event Player) == False;
		Is In Alternate Form(Event Player) == False;
		Is Using Ultimate(Event Player) == False;
	}

	actions
	{
		Stop Holding Button(Event Player.CustomBotDummyBot, Button(Crouch));
	}
}

rule("BastionInitialiseFlight")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.BastionMercyFlight == False;
		Event Player.BastionMercyCooldown == 0;
		Event Player.CustomBotDummyBot != 0;
		Is Alive(Event Player.CustomBotDummyBot) == True;
		Is Using Ultimate(Event Player) == False;
		Has Status(Event Player.CustomBotDummyBot, Hacked) == False;
		Has Status(Event Player.CustomBotDummyBot, Stunned) == False;
		Has Status(Event Player.CustomBotDummyBot, Asleep) == False;
		Has Status(Event Player.CustomBotDummyBot, Knocked Down) == False;
		Has Status(Event Player.CustomBotDummyBot, Frozen) == False;
	}

	actions
	{
		Wait Until(!Is Button Held(Event Player, Button(Interact)), 2);
		Disallow Button(Event Player, Button(Ultimate));
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Crouch));
		Wait(0.400, Ignore Condition);
		Event Player.BastionMercyFlight = True;
		Attach Players(Event Player, Event Player.CustomBotDummyBot, Vector(0, 0.600, 0.500));
		disabled Disable Movement Collision With Environment(Event Player.CustomBotDummyBot, True);
		Start Forcing Throttle(Event Player.CustomBotDummyBot, 0.700, 1, 0, 1, 0, 1);
		disabled Set Status(Event Player.CustomBotDummyBot, Null, Phased Out, 9999);
		disabled Set Status(Event Player.CustomBotDummyBot, Null, Invincible, 9999);
		disabled Set Invisible(Event Player.CustomBotDummyBot, All);
		Start Facing(Event Player.CustomBotDummyBot, Facing Direction Of(Event Player), 200, To World, Direction and Turn Rate);
		disabled Event Player.CustomBotDummyBot.MoveSpeedArray[Slot Of(Event Player) * 10 + 1] = Workshop Setting Integer(Custom String("Bastion"),
			Custom String("Mercy Flight Move Speed Bonus"), 90, 0, 200, 0);
		disabled Event Player.CustomBotDummyBot.StatUpdateCall = 1;
		Set Move Speed(Event Player.CustomBotDummyBot, 200);
		If(!Is In Alternate Form(Event Player));
			Allow Button(Event Player, Button(Ability 1));
			Press Button(Event Player, Button(Ability 1));
			Disallow Button(Event Player, Button(Ability 1));
		End;
		Allow Button(Event Player, Button(Ultimate));
	}
}

rule("BastionCrouchSlow")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
	}

	actions
	{
		Start Forcing Throttle(Event Player.CustomBotDummyBot, 0.500, 1, 0, 1, 0, 1);
	}
}

rule("BastionshiftSpeed")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == True;
		Is Button Held(Event Player, Button(Ability 1)) == True;
	}

	actions
	{
		Start Forcing Throttle(Event Player.CustomBotDummyBot, 1, 1, 0, 1, 0, 1);
	}
}

rule("BastionVelocityReset")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Is Button Held(Event Player, Button(Ability 1)) == False;
	}

	actions
	{
		Start Forcing Throttle(Event Player.CustomBotDummyBot, 0.700, 1, 0, 1, 0, 1);
	}
}

rule("BastionStopFlight")
{
	event
	{
		Subroutine;
		BastionStopFlight;
	}

	actions
	{
		Detach Players(Event Player);
		Stop Forcing Throttle(Event Player.CustomBotDummyBot);
		Start Facing(Event Player.CustomBotDummyBot, Direction Towards(Eye Position(Event Player.CustomBotDummyBot), Eye Position(
			Event Player)), 500, To World, Direction and Turn Rate);
		disabled Event Player.CustomBotDummyBot.MoveSpeedArray[Slot Of(Event Player) * 10 + 1] = 0;
		disabled Event Player.CustomBotDummyBot.StatUpdateCall = 1;
		Set Move Speed(Event Player.CustomBotDummyBot, 100);
		Allow Button(Event Player, Button(Ability 1));
		Allow Button(Event Player, Button(Crouch));
		Event Player.BastionMercyFlight = False;
		Event Player.BastionMercyCooldown = Max(Event Player.BastionMercyCooldown, Workshop Setting Integer(Custom String("Bastion"),
			Custom String("Flight Cooldown"), 10, 0, 100, 0));
		Set Status(Event Player.CustomBotDummyBot, Null, Phased Out, 1);
	}
}

rule("BastionInteractStopsFlight")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Call Subroutine(BastionStopFlight);
	}
}

rule("BastionHackStopsFlight")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == True;
		(Has Status(Event Player, Hacked) || Has Status(Event Player.CustomBotDummyBot, Hacked)) == True;
	}

	actions
	{
		Call Subroutine(BastionStopFlight);
	}
}

rule("BastionSleepStopsFlight")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == True;
		(Has Status(Event Player, Asleep) || Has Status(Event Player.CustomBotDummyBot, Asleep)) == True;
	}

	actions
	{
		Call Subroutine(BastionStopFlight);
	}
}

rule("BastionKnockDownStopsFlight")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == True;
		(Has Status(Event Player, Knocked Down) || Has Status(Event Player.CustomBotDummyBot, Knocked Down)) == True;
	}

	actions
	{
		Call Subroutine(BastionStopFlight);
	}
}

rule("BastionMercyDiesStopsFlight")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == True;
		(!Is Alive(Event Player.CustomBotDummyBot) || Event Player.CustomBotDummyBot == 0) == True;
	}

	actions
	{
		Call Subroutine(BastionStopFlight);
	}
}

rule("BastionUltimateStopsFlight")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == True;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Call Subroutine(BastionStopFlight);
	}
}

rule("MercyUltReset")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == False;
		Is Using Ultimate(Event Player.CustomBotDummyBot) == True;
		Is On Ground(Event Player) == True;
	}

	actions
	{
		Wait(0.200, Abort When False);
		Disable Kill Feed(All Players(All Teams));
		Wait(0.050, Ignore Condition);
		Kill(Event Player.CustomBotDummyBot, Null);
		Resurrect(Event Player.CustomBotDummyBot);
		Enable Kill Feed(All Players(All Teams));
		Wait(0.250, Ignore Condition);
		Set Weapon(Event Player.CustomBotDummyBot, 1);
	}
}

disabled rule("Rule 271")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Kill(Event Player, Null);
		Wait(2, Ignore Condition);
		Press Button(Event Player, Button(Jump));
		Loop If Condition Is True;
	}
}

disabled rule("Rule 272")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		disabled Call Subroutine(InfoDestroy);
		Call Subroutine(ClearBattleStats);
	}
}

rule("BastionInitialiseFlight")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Event Player.BastionMercyFlight == True;
		Event Player.CustomBotDummyBot != 0;
		Is Alive(Event Player.CustomBotDummyBot) == True;
		Is Using Ultimate(Event Player) == False;
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Allow Button(Event Player, Button(Ability 1));
		Press Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ability 1));
		Wait(0.400, Abort When False);
		Loop If(!Is In Alternate Form(Event Player));
	}
}

disabled rule("Zenyatta")
{
	event
	{
		Ongoing - Global;
	}
}

rule("ZenIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Zenyatta));
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
	}
}

rule("ZenQuickMelee")
{
	event
	{
		Ongoing - Each Player;
		All;
		Zenyatta;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Melee)) == True;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Set Ability Cooldown(Event Player, Button(Melee), 0);
	}
}

rule("ZenCriticalSuccess")
{
	event
	{
		Player Dealt Damage;
		All;
		Zenyatta;
	}

	conditions
	{
		Event Ability == Button(Melee);
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Event Player.ZenyattaRandomRoll = Random Integer(1, 20);
		If(Event Player.ZenyattaRandomRoll == 20);
			Kill(Victim, Attacker);
			Small Message(Append To Array(Append To Array(Empty Array, Victim), Attacker), Custom String("Critical Success!"));
		Else If(Event Player.ZenyattaRandomRoll == 1);
			Damage(Event Player, Event Player, 60);
			Small Message(Append To Array(Append To Array(Empty Array, Victim), Attacker), Custom String("Critical Fail!"));
		Else;
			Small Message(Append To Array(Append To Array(Empty Array, Victim), Attacker), Custom String("Rolled: {0}",
				Event Player.ZenyattaRandomRoll));
			Damage(Victim, Event Player, Event Player.ZenyattaRandomRoll * 3);
		End;
	}
}

disabled rule("Soldier")
{
	event
	{
		Ongoing - Global;
	}
}

rule("SoldierIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Soldier: 76;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Soldier: 76));
		Set Ultimate Charge(Event Player, 100);
		Wait(1.100, Ignore Condition);
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
	}
}

disabled rule("Bridgittetiste")
{
	event
	{
		Ongoing - Global;
	}
}

rule("BridgitteIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Brigitte;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Brigitte));
		Event Player.BridgitteHealthStack = 0;
		Create HUD Text(Event Player, Custom String("Health Stacks: {0}", Event Player.BridgitteHealthStack), Null, Null, Top, 5, Color(
			Violet), Color(White), Color(White), String, Default Visibility);
		Modify Player Variable(Event Player, TrashArray, Append To Array, Last Text ID);
		Add Health Pool To Player(Event Player, Health, Event Player.BridgitteHealthStack * 20, True, True);
	}
}

rule("BriditteGainHealthOnDamage")
{
	event
	{
		Player Took Damage;
		All;
		All;
	}

	conditions
	{
		Hero Of(Attacker) == Hero(Brigitte);
		Attacker.BridgitteHealthStack < 100;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Attacker.BridgitteHealthStack += 1;
		Heal(Attacker, Attacker, 10);
	}
}

disabled rule("BriditteLoseHalfOnHeathpack")
{
	event
	{
		Player Received Healing;
		All;
		Brigitte;
	}

	conditions
	{
		Event Was Health Pack == True;
	}

	actions
	{
		Event Player.BridgitteHealthStack -= Round To Integer(Event Player.BridgitteHealthStack / 2, Down);
	}
}

rule("BrdigitteGivesHealthOnDeath")
{
	event
	{
		Player Dealt Final Blow;
		All;
		All;
	}

	conditions
	{
		Hero Of(Victim) == Hero(Brigitte);
		Victim.BridgitteHealthStack > 0;
	}

	actions
	{
		Add Health Pool To Player(Event Player, Health, Victim.BridgitteHealthStack * 20, False, False);
		Heal(Event Player, Null, Victim.BridgitteHealthStack * 20);
		Play Effect(All Players(All Teams), Good Pickup Effect, Color(Lime Green), Position Of(Event Player) + Vector(0, 0.600, 0), 2);
		Event Player.BridgitteHealthStack = Round To Integer(Victim.BridgitteHealthStack / 2, Up);
	}
}

disabled rule("Torbjorn")
{
	event
	{
		Ongoing - Global;
	}
}

rule("TorbInitialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Game In Progress == True;
		disabled Event Player.RespawnState == 1;
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		disabled Event Player.RespawnState == 1;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(TorbjÃ¶rn));
		Event Player.CustomBotHero = Hero(Bastion);
		Event Player.CustomBotTurnRate = Workshop Setting Integer(Custom String("Torbjorn"), Custom String("Turret Turn Rate"), 100, 10,
			500, 0);
		Event Player.CustomBotMaxAmmo = Workshop Setting Integer(Custom String("Torbjorn"), Custom String("Turret Ammo Capacity"), 0, 0,
			1000, 0);
		Event Player.CustomBotDetectionRange = Workshop Setting Integer(Custom String("Torbjorn"), Custom String("Turret Detection Range"),
			50, 5, 100, 0);
		Event Player.CustomBotInaccuracy = Workshop Setting Real(Custom String("Torbjorn"), Custom String("Turret Inaccuracy"), 2, 0, 2,
			0);
		Disallow Button(Event Player, Button(Ability 1));
		Disallow Button(Event Player, Button(Ultimate));
		Event Player.CustomBotMoveSpeed = 100;
		Event Player.CustomBotMaximumHealth = Workshop Setting Integer(Custom String("Torbjorn"), Custom String("Turret Health"), 100, 10,
			500, 0);
		Event Player.CustomBotDamageDealt = Workshop Setting Integer(Custom String("Torbjorn"), Custom String("Turret Damage Dealt"), 160,
			10, 500, 0);
		Event Player.CustomBotDamageTaken = Workshop Setting Integer(Custom String("Torbjorn"), Custom String("Turret Damage Taken"), 130,
			10, 500, 0);
		Event Player.TorbHoldingTurret = False;
		Event Player.TorbMountTurret = False;
	}
}

rule("TorbPlaceTurret")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Ability 1)) == True;
		Ability Cooldown(Event Player, Button(Ability 1)) == 0;
		Is Dummy Bot(Event Player) == False;
		Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Set Ability 1 Enabled(Event Player, False);
		Call Subroutine(CreateCustomBot);
		Set Status(Event Player.CustomBotDummyBot, Null, Unkillable, 9999);
		Event Player.TorbHoldingTurret = False;
		Event Player.TorbMountTurret = False;
		Add Health Pool To Player(Event Player.CustomBotDummyBot, Armor, 120, True, True);
	}
}

rule("TorbTurretDies")
{
	event
	{
		Player Died;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player.CustomBotOwner) == Hero(TorbjÃ¶rn);
	}

	actions
	{
		Set Ability Cooldown(Event Player.CustomBotOwner, Button(Ability 1), Workshop Setting Integer(Custom String("Torbjorn"),
			Custom String("Turret Cooldown"), 20, 0, 30, 0));
		Set Ability 1 Enabled(Event Player.CustomBotOwner, True);
		Event Player.TorbHoldingTurret = False;
		Event Player.TorbMountTurret = False;
		Set Primary Fire Enabled(Event Player, True);
	}
}

rule("TorbTurretShift")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player.CustomBotOwner) == Hero(TorbjÃ¶rn);
		Is In Alternate Form(Event Player) == False;
	}

	actions
	{
		Press Button(Event Player, Button(Ability 1));
		Wait(0.250, Abort When False);
		Loop If Condition Is True;
	}
}

rule("TorbTurretAttacked")
{
	event
	{
		Player Took Damage;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player.CustomBotOwner) == Hero(TorbjÃ¶rn);
		Event Player.CustomBotOwner != Attacker;
	}

	actions
	{
		Abort If(Health(Event Player) > 2);
		Clear Status(Event Player, Unkillable);
		Kill(Event Player, Attacker);
	}
}

rule("TorbTurretAttackedByOwner")
{
	event
	{
		Player Took Damage;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player.CustomBotOwner) == Hero(TorbjÃ¶rn);
		Event Player.CustomBotOwner == Attacker;
		"check for torb hammer"
		Weapon(Attacker) != 2;
	}

	actions
	{
		disabled Abort If(Health(Event Player) > 2);
		Clear Status(Event Player, Unkillable);
		Kill(Event Player, Attacker);
	}
}

rule("TorbTurretHeal")
{
	event
	{
		Player Took Damage;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player.CustomBotOwner) == Hero(TorbjÃ¶rn);
		Event Player.CustomBotOwner == Attacker;
		"check for torb hammer"
		Weapon(Attacker) == 2;
		Health(Event Player) < Max Health(Event Player);
		Has Status(Event Player.CustomBotOwner, Hacked) == False;
	}

	actions
	{
		Heal(Event Player, Null, Event Damage + Workshop Setting Integer(Custom String("Torbjorn"), Custom String("Turret Hammer Heal"),
			20, 0, 100, 0));
	}
}

rule("TorbTurretUlt")
{
	event
	{
		Ongoing - Each Player;
		All;
		Bastion;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Hero Of(Event Player.CustomBotOwner) == Hero(TorbjÃ¶rn);
		Is Button Held(Event Player.CustomBotOwner, Button(Ultimate)) == True;
		Ultimate Charge Percent(Event Player.CustomBotOwner) == 100;
		Has Status(Event Player.CustomBotOwner, Hacked) == False;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
		Press Button(Event Player, Button(Ultimate));
		Set Ultimate Charge(Event Player.CustomBotOwner, 0);
		Wait(0.250, Ignore Condition);
		Loop If(Is Using Ultimate(Event Player) == False);
	}
}

rule("TorbErrorMessage")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
		Event Player.CustomBotDummyBot == Null;
		Ultimate Charge Percent(Event Player) == 100;
		Has Status(Event Player, Hacked) == False;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Small Message(Event Player, Custom String("A turret must be placed to use your ultimate"));
	}
}

rule("TorbTurretPickup")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == True;
		Distance Between(Position Of(Event Player), Position Of(Event Player.CustomBotDummyBot)) <= 2;
		Event Player.TorbHoldingTurret == False;
		Entity Exists(Event Player.CustomBotDummyBot) == True;
		Has Status(Event Player, Hacked) == False;
		Event Player.TorbMountTurret == False;
		Is In Alternate Form(Event Player.CustomBotDummyBot) == True;
	}

	actions
	{
		Attach Players(Event Player.CustomBotDummyBot, Event Player, Vector(0, 1, 0));
		Wait Until(!Is Button Held(Event Player, Button(Interact)), 3);
		Event Player.TorbHoldingTurret = True;
	}
}

rule("TorbTurretPickupThrow")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Event Player.TorbHoldingTurret == True;
		disabled Has Status(Event Player, Hacked) == False;
	}

	actions
	{
		Wait Until(!Is Button Held(Event Player, Button(Interact)), 0.500);
		Detach Players(Event Player.CustomBotDummyBot);
		Set Status(Event Player.CustomBotDummyBot, Null, Phased Out, 0.300);
		Apply Impulse(Event Player.CustomBotDummyBot, Facing Direction Of(Event Player), Workshop Setting Real(Custom String("Torbjorn"),
			Custom String("Turret Throw Speed"), 25, 0, 100, 0), To World, Cancel Contrary Motion);
		Set Primary Fire Enabled(Event Player, True);
		Wait(0.050, Ignore Condition);
		If(Is Button Held(Event Player, Button(Interact)));
			Attach Players(Event Player, Event Player.CustomBotDummyBot, Vector(-0.300, 0.600, -0.700));
			Start Facing(Event Player.CustomBotDummyBot, Direction Towards(Eye Position(Event Player.CustomBotDummyBot), Ray Cast Hit Position(
				Eye Position(Event Player), Eye Position(Event Player.CustomBotDummyBot) + Facing Direction Of(Event Player) * 100,
				All Players(All Teams), Append To Array(Event Player, Event Player.CustomBotDummyBot), True)), 200, To World,
				Direction and Turn Rate);
			Set Primary Fire Enabled(Event Player, False);
			Set Secondary Fire Enabled(Event Player, False);
			Event Player.TorbMountTurret = True;
		End;
		Wait Until(!Is Button Held(Event Player, Button(Interact)), 1);
		Event Player.TorbHoldingTurret = False;
	}
}

rule("TorbPrimaryUpdate")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Event Player.TorbHoldingTurret == False;
		Event Player.TorbMountTurret == True;
		Entity Exists(Event Player.CustomBotDummyBot) == True;
		Is Button Held(Event Player, Button(Primary Fire)) != Is Button Held(Event Player.CustomBotDummyBot, Button(Primary Fire));
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Start Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
		Else;
			Stop Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
		End;
	}
}

rule("TorbHacked")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Entity Exists(Event Player.CustomBotDummyBot) == True;
		(Has Status(Event Player, Hacked) || !Is In Alternate Form(Event Player.CustomBotDummyBot)) == True;
	}

	actions
	{
		If(Event Player.TorbHoldingTurret);
			Detach Players(Event Player.CustomBotDummyBot);
			Wait Until(!Is Button Held(Event Player, Button(Interact)), 3);
			Event Player.TorbHoldingTurret = False;
			Set Primary Fire Enabled(Event Player, True);
		End;
		If(Event Player.TorbMountTurret);
			Set Primary Fire Enabled(Event Player, True);
			Set Secondary Fire Enabled(Event Player, True);
			Detach Players(Event Player);
			Stop Facing(Event Player.CustomBotDummyBot);
			Stop Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
			Wait Until(!Is Button Held(Event Player, Button(Interact)), 3);
			Event Player.TorbMountTurret = False;
		End;
	}
}

disabled rule("TorbForceHammer")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Alive(Event Player.CustomBotDummyBot) == True;
		Entity Exists(Event Player.CustomBotDummyBot) == True;
		Weapon(Event Player) != 2;
	}

	actions
	{
		Set Weapon(Event Player, 2);
		Wait(0.250, Abort When False);
		Loop If Condition Is True;
	}
}

rule("TorbTurretMount")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		Is Button Held(Event Player, Button(Crouch)) == False;
		Has Status(Event Player, Hacked) == False;
		Entity Exists(Event Player.CustomBotDummyBot) == True;
		Distance Between(Position Of(Event Player), Position Of(Event Player.CustomBotDummyBot)) <= 2;
		Event Player.TorbHoldingTurret == False;
		Event Player.TorbMountTurret == False;
	}

	actions
	{
		Attach Players(Event Player, Event Player.CustomBotDummyBot, Vector(-0.100, 0.600, -0.700));
		Start Facing(Event Player.CustomBotDummyBot, Direction Towards(Eye Position(Event Player.CustomBotDummyBot), Ray Cast Hit Position(
			Eye Position(Event Player), Eye Position(Event Player.CustomBotDummyBot) + Facing Direction Of(Event Player) * 100,
			All Players(All Teams), Append To Array(Event Player, Event Player.CustomBotDummyBot), True)), 200, To World,
			Direction and Turn Rate);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Wait Until(!Is Button Held(Event Player, Button(Interact)), 1);
		If(Event Player.TorbHoldingTurret);
			Set Primary Fire Enabled(Event Player, True);
			Set Secondary Fire Enabled(Event Player, True);
			Detach Players(Event Player);
			Wait(0.250, Ignore Condition);
			Stop Facing(Event Player.CustomBotDummyBot);
			Stop Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
			Event Player.TorbMountTurret = False;
		Else;
			Event Player.TorbMountTurret = True;
		End;
	}
}

rule("TorbTurretDemount")
{
	event
	{
		Ongoing - Each Player;
		All;
		TorbjÃ¶rn;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
		disabled Is Button Held(Event Player, Button(Crouch)) == False;
		Entity Exists(Event Player.CustomBotDummyBot) == True;
		Has Status(Event Player, Hacked) == False;
		Distance Between(Position Of(Event Player), Position Of(Event Player.CustomBotDummyBot)) <= 2;
		Event Player.TorbHoldingTurret == False;
		Event Player.TorbMountTurret == True;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Detach Players(Event Player);
		Stop Facing(Event Player.CustomBotDummyBot);
		Stop Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
		Wait Until(!Is Button Held(Event Player, Button(Interact)), 3);
		Event Player.TorbMountTurret = False;
	}
}

disabled rule("Phara")
{
	event
	{
		Ongoing - Global;
	}
}

rule("PharaIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Pharah));
		Event Player.CustomBotHero = Hero(Pharah);
		Event Player.CustomBotFriendlyFire = False;
		Event Player.CustomBotAutoAimEnabled = False;
		Event Player.CustomBotTurnRate = 0;
		Event Player.CustomBotMaxAmmo = 0;
		Event Player.CustomBotDetectionRange = 0;
		Event Player.CustomBotInaccuracy = 0;
		disabled Disallow Button(Event Player, Button(Ultimate));
		Event Player.CustomBotMaximumHealth = 100;
		Event Player.CustomBotDamageDealt = 100;
		Event Player.CustomBotDamageTaken = 100;
		Call Subroutine(CreateCustomBot);
		Set Status(Event Player.CustomBotDummyBot, Null, Invincible, 9999);
		Set Status(Event Player.CustomBotDummyBot, Null, Phased Out, 9999);
		Set Invisible(Event Player.CustomBotDummyBot, All);
		Attach Players(Event Player.CustomBotDummyBot, Event Player, Vector(0, 0, 0.800));
		Start Facing(Event Player.CustomBotDummyBot, Facing Direction Of(Event Player), 500, To World, Direction and Turn Rate);
		Disable Movement Collision With Environment(Event Player.CustomBotDummyBot, True);
	}
}

rule("PharaPrimaryUpdate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Firing Primary(Event Player) != Is Button Held(Event Player.CustomBotDummyBot, Button(Primary Fire));
	}

	actions
	{
		If(Is Button Held(Event Player, Button(Primary Fire)));
			Wait(0.425, Ignore Condition);
			Start Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
		Else;
			Stop Holding Button(Event Player.CustomBotDummyBot, Button(Primary Fire));
		End;
		Wait(0.250, Abort When False);
		Loop If Condition Is True;
	}
}

rule("PharaUseUltimate")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Using Ultimate(Event Player) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player.CustomBotDummyBot, 100);
		Press Button(Event Player.CustomBotDummyBot, Button(Ultimate));
	}
}

rule("PharaHackDisablePrimary")
{
	event
	{
		Ongoing - Each Player;
		All;
		Pharah;
	}

	conditions
	{
		Has Status(Event Player, Hacked) == True;
		Is Dummy Bot(Event Player) == False;
	}

	actions
	{
		Set Primary Fire Enabled(Event Player.CustomBotDummyBot, False);
		Wait Until(!Has Status(Event Player, Hacked), 99999);
		Abort If(Hero Of(Event Player) != Hero(Pharah));
		Set Primary Fire Enabled(Event Player.CustomBotDummyBot, True);
	}
}

rule("ReaperStealSoulsFromReaper")
{
	event
	{
		Player Dealt Final Blow;
		All;
		Reaper;
	}

	conditions
	{
		Is Game In Progress == True;
		Is Dummy Bot(Event Player) == False;
		Hero Of(Victim) == Hero(Reaper);
		Victim.ReaperSoulsCollected > 0;
	}

	actions
	{
		While(Victim.ReaperSoulsCollected > 0);
			Abort If(Event Player.ReaperSoulsCollected >= 13);
			If(!Array Contains(Event Player.ReaperSoulList, Victim.ReaperSoulList[0]));
				Event Player.ReaperSoulList[Event Player.ReaperSoulsCollected] = Victim.ReaperSoulList[0];
				Event Player.ReaperSoulsCollected += 1;
			End;
			Victim.ReaperSoulsCollected -= 1;
			Modify Player Variable(Victim, ReaperSoulList, Remove From Array By Index, 0);
		End;
	}
}

rule("EchoIntialise")
{
	event
	{
		Ongoing - Each Player;
		All;
		Echo;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == False;
		Is Alive(Event Player) == True;
		Is Game In Progress == True;
	}

	actions
	{
		Wait(0.070, Abort When False);
		Abort If(Hero Of(Event Player) != Hero(Echo));
		Start Scaling Player(Event Player, 0.260, True);
		Disallow Button(Event Player, Button(Ultimate));
		Start Modifying Hero Voice Lines(Event Player, 1.500, True);
		Disallow Button(Event Player, Button(Secondary Fire));
		Disallow Button(Event Player, Button(Primary Fire));
	}
}